
#include <istream>
#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <cmath>
#include <stdlib.h>
#include <iomanip>
#include <time.h>

#include <sys/time.h>
#include <time.h>



#define CASENAME "test0"

#define XDIM 251
#define YDIM 43
#define ZDIM 43
#define TMAX 100
#define STARTF 0

#define OBSTR 5.f
#define OBSTX 50.5f
#define OBSTY 20.5f
#define OBSTZ 20.5f

#define RE 50.f//100.f;
#define UMAX 0.04f




using namespace std;


inline int ImageFcn(int x, int y, int z){
//Cylinder
	if(((x-OBSTX)*(x-OBSTX)+(y-OBSTY)*(y-OBSTY))<OBSTR*OBSTR)
        return 10;
//Sphere
//	if(((x-OBSTX)*(x-OBSTX)+(y-OBSTY)*(y-OBSTY)+(z-OBSTZ)*(z-OBSTZ))<OBSTR*OBSTR)
//	{
////		if(z == 0 || z == ZDIM-1)
////		return 1;
////		else
//		return 10;
//	}
//	if(y == 0)
//		return 1;//22;//22;
//	else if(y == YDIM-1)
//		return 1;//21;
//	else if(z == 0)
//		return 1;//24;
//	else if(z == ZDIM-1)
//		return 1;//23;
//	else if(x == 0)
//		return 53;//13;//13;
//	else if(x == XDIM-1)
//		return 54;//14;//14;
//	else
//		return 0;


////Lid Driven Cavity
	if(x == 0)
		return 53;
	else if(x == XDIM-1 || y == 0 || y == YDIM-1 || z == 0 || z == ZDIM-1)
		return 1;
	else
		return 0;
}


int
timeval_subtract (double *result, struct timeval *x, struct timeval *y)
{
  struct timeval result0;

  /* Perform the carry for the later subtraction by updating y. */
  if (x->tv_usec < y->tv_usec) {
    int nsec = (y->tv_usec - x->tv_usec) / 1000000 + 1;
    y->tv_usec -= 1000000 * nsec;
    y->tv_sec += nsec;
  }
  if (x->tv_usec - y->tv_usec > 1000000) {
    int nsec = (y->tv_usec - x->tv_usec) / 1000000;
    y->tv_usec += 1000000 * nsec;
    y->tv_sec -= nsec;
  }

  /* Compute the time remaining to wait.
     tv_usec is certainly positive. */
  result0.tv_sec = x->tv_sec - y->tv_sec;
  result0.tv_usec = x->tv_usec - y->tv_usec;
  *result = ((double)result0.tv_usec)/1e6 + (double)result0.tv_sec;

  /* Return 1 if result is negative. */
  return x->tv_sec < y->tv_sec;
}

int dmin(int a, int b)
{
	if (a<b) return a;
	else return b-1;
}
int dmax(int a)
{
	if (a>-1) return a;
	else return 0;
}


inline void bgk_collide(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, float omega)
{
	float rho,u,v,w;	
	rho = f0+f1+f2+f3+f4+f5+f6+f7+f8+f9;
	rho +=f10+f11+f12+f13+f14+f15+f16+f17+f18;
	u = f1-f3+f5-f6-f7+f8+f10-f12+f15-f17;
	v = f2-f4+f5+f6-f7-f8+f11-f13+f16-f18;
	w = f9+f10+f11+f12+f13-f14-f15-f16-f17-f18;
//    rho = 1.0f;
//    u = 0.0f;
//    v = 0.0f;
//    w = 0.0f;
	float usqr = u*u+v*v+w*w;

	f0 -=omega*(f0 -0.3333333333f*(rho-1.5f*usqr));
	f1 -=omega*(f1 -0.0555555556f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr));                
	f2 -=omega*(f2 -0.0555555556f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr));
	f3 -=omega*(f3 -0.0555555556f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr));
	f4 -=omega*(f4 -0.0555555556f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr));
	f5 -=omega*(f5 -0.0277777778f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr));
	f6 -=omega*(f6 -0.0277777778f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr));
	f7 -=omega*(f7 -0.0277777778f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr));
	f8 -=omega*(f8 -0.0277777778f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr));
	f9 -=omega*(f9 -0.0555555556f*(rho+3.0f*w+4.5f*w*w-1.5f*usqr));
	f10-=omega*(f10-0.0277777778f*(rho+3.0f*(u+w)+4.5f*(u+w)*(u+w)-1.5f*usqr));
	f11-=omega*(f11-0.0277777778f*(rho+3.0f*(v+w)+4.5f*(v+w)*(v+w)-1.5f*usqr));
	f12-=omega*(f12-0.0277777778f*(rho+3.0f*(-u+w)+4.5f*(-u+w)*(-u+w)-1.5f*usqr));
	f13-=omega*(f13-0.0277777778f*(rho+3.0f*(-v+w)+4.5f*(-v+w)*(-v+w)-1.5f*usqr));
	f14-=omega*(f14-0.0555555556f*(rho-3.0f*w+4.5f*w*w-1.5f*usqr));
	f15-=omega*(f15-0.0277777778f*(rho+3.0f*(u-w)+4.5f*(u-w)*(u-w)-1.5f*usqr));
	f16-=omega*(f16-0.0277777778f*(rho+3.0f*(v-w)+4.5f*(v-w)*(v-w)-1.5f*usqr));
	f17-=omega*(f17-0.0277777778f*(rho+3.0f*(-u-w)+4.5f*(-u-w)*(-u-w)-1.5f*usqr));
	f18-=omega*(f18-0.0277777778f*(rho+3.0f*(-v-w)+4.5f*(-v-w)*(-v-w)-1.5f*usqr));






}



inline void mrt_collide(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, float omega)
{
	float u,v,w;	
	u = f1-f3+f5-f6-f7+f8+f10-f12+f15-f17;
	v = f2-f4+f5+f6-f7-f8+f11-f13+f16-f18;
	w = f9+f10+f11+f12+f13-f14-f15-f16-f17-f18;
//	float rho = f0+f1+f2+f3+f4+f5+f6+f7+f8+f9+
//	      f10+f11+f12+f13+f14+f15+f16+f17+f18;
//	u = rho*u;
//	v = rho*v;
//	w = rho*w;


	float m1,m2,m4,m6,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18;

//	//COMPUTE M-MEQ
//	//m1  = -19.f*f0+ 19.f*f5+19.f*f6+19.f*f7+19.f*f8+19.f*f10+19.f*f11+19.f*f12+19.f*f13+19.f*f15+19.f*f16+19.f*f17+19.f*f18   -19.f*(u*u+v*v+w*w);//+8.f*(f5+f6+f7+f8+f10+f11+f12+f13+f15+f16+f17+f18);
//	//m4  = -3.33333333f*f1+3.33333333f*f3+1.66666667f*f5-1.66666667f*f6-1.66666667f*f7+1.66666667f*f8+1.66666667f*f10-1.66666667f*f12+1.66666667f*f15-1.66666667f*f17;
//	//m6  = -3.33333333f*f2+3.33333333f*f4+1.66666667f*f5+1.66666667f*f6-1.66666667f*f7-1.66666667f*f8+1.66666667f*f11-1.66666667f*f13+1.66666667f*f16-1.66666667f*f18;
//	//m8  = -3.33333333f*f9+1.66666667f*f10+1.66666667f*f11+1.66666667f*f12+1.66666667f*f13+3.33333333f*f14-1.66666667f*f15-1.66666667f*f16-1.66666667f*f17-1.66666667f*f18;
//	m1  = 19.f*(-f0+ f5+f6+f7+f8+f10+f11+f12+f13+f15+f16+f17+f18   -(u*u+v*v+w*w));//+8.f*(f5+f6+f7+f8+f10+f11+f12+f13+f15+f16+f17+f18);
//	m2  =  12.f*f0+ -4.f*f1+ -4.f*f2+ -4.f*f3+ -4.f*f4+      f5+      f6+      f7+      f8+ -4.f*f9+    f10+        f11+      f12+      f13+ -4.f*f14+      f15+      f16+      f17+      f18 +7.53968254f*(u*u+v*v+w*w);
////	m4  = 1.666666667f*(-2.f*f1+2.f*f3+f5-f6-f7+f8+f10-f12+f15-f17);
////	m6  = 1.666666667f*(-2.f*f2+2.f*f4+f5+f6-f7-f8+f11-f13+f16-f18);
////	m8  = 1.666666667f*(-2.f*f9+f10+f11+f12+f13+2.f*f14-f15-f16-f17-f18);
//	m4  = 1.666666667f*(-3.f*f1+3.f*f3+u);
//	m6  = 1.666666667f*(-3.f*f2+3.f*f4+v);
//	m8  = 1.666666667f*(-3.f*f9+3.f*f14+w);
//	m9  = 2.f*f1+  -  f2+  2.f*f3+  -  f4+ f5+ f6+ f7+ f8+-    f9+ f10+ -2.f*f11+ f12+-2.f*f13+-    f14+ f15+ -2.f*f16+ f17+-2.f*f18  -(2.f*u*u-(v*v+w*w));
//	m10 =-4.f*f1+ 2.f*f2+ -4.f*f3+ 2.f*f4+ f5+ f6+ f7+ f8+ 2.f*f9+ f10+ -2.f*f11+ f12+-2.f*f13+ 2.f*f14+ f15+ -2.f*f16+ f17+-2.f*f18;
//	m11 =             f2         +     f4+ f5+ f6+ f7+ f8+-    f9+-f10          +-f12         +-    f14+-f15          +-f17         -(v*v-w*w);
//	m12 =        -2.f*f2          -2.f*f4+ f5+ f6+ f7+ f8+ 2.f*f9+-f10          +-f12         + 2.f*f14+-f15          +-f17         ;
//	m13 =                                  f5+-f6+ f7+-f8                                                                             -u*v;
//	m14 =                                                                    f11     +-    f13              + -    f16     +     f18  -v*w;
//	m15 =                                                          f10        + - f12                  +-f15          + f17           -u*w;  
//	m16 =                                  f5+-f6+-f7+ f8         -f10        +   f12                  +-f15          + f17         ;  
//	m17 =                                 -f5+-f6+ f7+ f8              +     f11     +-    f13              +      f16     +-    f18;  
//	m18 =                                                          f10+-     f11+ f12+-    f13         +-f15+      f16+-f17+     f18;
//
//f0 -=- 0.012531328f*(m1)+ 0.047619048f*(m2);
//f1 -=-0.0045948204f*(m1)+-0.015873016f*(m2)+  -0.1f*(m4)                 + 0.055555556f*((m9)*omega-m10);
//f2 -=-0.0045948204f*(m1)+-0.015873016f*(m2)             +   -0.1f*(m6)   +-0.027777778f*((m9)*omega-m10)+ 0.083333333f*((m11)*omega-m12);
//f3 -=-0.0045948204f*(m1)+-0.015873016f*(m2)+   0.1f*(m4)                 + 0.055555556f*((m9)*omega-m10);                                                                                         
//f4 -=-0.0045948204f*(m1)+-0.015873016f*(m2)             +    0.1f*(m6)   +-0.027777778f*((m9)*omega-m10)+ 0.083333333f*((m11)*omega-m12);
//f5 -= 0.0033416876f*(m1)+ 0.003968254f*(m2)+ 0.025f*(m4+m6)              +0.013888889f*(m10)+0.041666667f*(m12)+0.125f*( m16-m17)+ omega*(0.027777778f*(m9) +0.083333333f*(m11)+( 0.25f*(m13)));
//f6 -= 0.0033416876f*(m1)+ 0.003968254f*(m2)+-0.025f*(m4-m6)              +0.013888889f*(m10)+0.041666667f*(m12)+0.125f*(-m16-m17)+ omega*(0.027777778f*(m9) +0.083333333f*(m11)+(-0.25f*(m13)));
//f7 -= 0.0033416876f*(m1)+ 0.003968254f*(m2)+-0.025f*(m4+m6)              +0.013888889f*(m10)+0.041666667f*(m12)+0.125f*(-m16+m17)+ omega*(0.027777778f*(m9) +0.083333333f*(m11)+( 0.25f*(m13)));
//f8 -= 0.0033416876f*(m1)+ 0.003968254f*(m2)+ 0.025f*(m4-m6)              +0.013888889f*(m10)+0.041666667f*(m12)+0.125f*( m16+m17)+ omega*(0.027777778f*(m9) +0.083333333f*(m11)+(-0.25f*(m13)));
//f9 -=-0.0045948204f*(m1)+-0.015873016f*(m2)                +   -0.1f*(m8)+-0.027777778f*((m9)*omega-m10)+-0.083333333f*((m11)*omega-m12);                                       
//f10-= 0.0033416876f*(m1)+ 0.003968254f*(m2)+ 0.025f*(m4+m8)              +0.013888889f*(m10)-0.041666667f*(m12)+0.125f*(-m16+m18)+ omega*(0.027777778f*(m9) -0.083333333f*(m11)+( 0.25f*(m15)));
//f11-= 0.0033416876f*(m1)+ 0.003968254f*(m2)             +  0.025f*(m6+m8)+0.125f*( m17-m18)-0.027777778f*(m10)+omega*(-0.055555556f*(m9) +( 0.25f*(m14)));
//f12-= 0.0033416876f*(m1)+ 0.003968254f*(m2)+-0.025f*(m4-m8)              +0.013888889f*(m10)-0.041666667f*(m12)+0.125f*( m16+m18)+ omega*(0.027777778f*(m9) -0.083333333f*(m11)+(-0.25f*(m15)));
//f13-= 0.0033416876f*(m1)+ 0.003968254f*(m2)             + -0.025f*(m6-m8)+0.125f*(-m17-m18)-0.027777778f*(m10)+omega*(-0.055555556f*(m9) +(-0.25f*(m14)));
//f14-=-0.0045948204f*(m1)+-0.015873016f*(m2)                +    0.1f*(m8)+-0.027777778f*((m9)*omega-m10)+-0.083333333f*((m11)*omega-m12);                                      
//f15-= 0.0033416876f*(m1)+ 0.003968254f*(m2)+ 0.025f*(m4-m8)              +0.013888889f*(m10)-0.041666667f*(m12)+0.125f*(-m16-m18)+ omega*(0.027777778f*(m9) -0.083333333f*(m11)+(-0.25f*(m15)));
//f16-= 0.0033416876f*(m1)+ 0.003968254f*(m2)             +  0.025f*(m6-m8)+0.125f*( m17+m18)-0.027777778f*(m10)+omega*(-0.055555556f*(m9) +(-0.25f*(m14)));
//f17-= 0.0033416876f*(m1)+ 0.003968254f*(m2)+-0.025f*(m4+m8)              +0.013888889f*(m10)-0.041666667f*(m12)+0.125f*( m16-m18)+ omega*(0.027777778f*(m9) -0.083333333f*(m11)+( 0.25f*(m15)));
//f18-= 0.0033416876f*(m1)+ 0.003968254f*(m2)             + -0.025f*(m6+m8)+0.125f*(-m17+m18)-0.027777778f*(m10)+omega*(-0.055555556f*(m9) +( 0.25f*(m14)));


    //COMPUTE M-MEQ
	m1  = (-f0+ f5+f6+f7+f8+f10+f11+f12+f13+f15+f16+f17+f18   -(u*u+v*v+w*w));//+8.f*(f5+f6+f7+f8+f10+f11+f12+f13+f15+f16+f17+f18);
	m2  =  12.f*f0+ -4.f*f1+ -4.f*f2+ -4.f*f3+ -4.f*f4+      f5+      f6+      f7+      f8+ -4.f*f9+    f10+        f11+      f12+      f13+ -4.f*f14+      f15+      f16+      f17+      f18 +7.53968254f*(u*u+v*v+w*w);
	m4  = (-5.f*f1+5.f*f3 +1.666666667f*u);
	m6  = (-5.f*f2+5.f*f4 +1.666666667f*v);
	m8  = (-5.f*f9+5.f*f14+1.666666667f*w);
	m9  = 2.f*f1+  -  f2+  2.f*f3+  -  f4+ f5+ f6+ f7+ f8+-    f9+ f10+ -2.f*f11+ f12+-2.f*f13+-    f14+ f15+ -2.f*f16+ f17+-2.f*f18  -(2.f*u*u-(v*v+w*w));
	m10 =-4.f*f1+ 2.f*f2+ -4.f*f3+ 2.f*f4+ f5+ f6+ f7+ f8+ 2.f*f9+ f10+ -2.f*f11+ f12+-2.f*f13+ 2.f*f14+ f15+ -2.f*f16+ f17+-2.f*f18;
	m11 =             f2         +     f4+ f5+ f6+ f7+ f8+-    f9+-f10          +-f12         +-    f14+-f15          +-f17         -(v*v-w*w);
	m12 =        -2.f*f2          -2.f*f4+ f5+ f6+ f7+ f8+ 2.f*f9+-f10          +-f12         + 2.f*f14+-f15          +-f17         ;
	m13 =                                  f5+-f6+ f7+-f8                                                                             -u*v;
	m14 =                                                                    f11     +-    f13              + -    f16     +     f18  -v*w;
	m15 =                                                          f10        + - f12                  +-f15          + f17           -u*w;  
	m16 =                                  f5+-f6+-f7+ f8         -f10        +   f12                  +-f15          + f17         ;  
	m17 =                                 -f5+-f6+ f7+ f8              +     f11     +-    f13              +      f16     +-    f18;  
	m18 =                                                          f10+-     f11+ f12+-    f13         +-f15+      f16+-f17+     f18;

    m13 *= 0.25f;
    m14 *= 0.25f;
    m15 *= 0.25f*omega;
    m16 *= 0.125f;
    m17 *= 0.125f;
    m18 *= 0.125f;
    m12 *= 0.04166666667f;
    m11 *= 0.08333333333f*omega;
    m10 *= 0.01388888889f;
    m9  *= 0.02777777778f*omega;
    m4  *= 0.025f;
    m6  *= 0.025f;
    m8  *= 0.025f;
    m2  *= 0.003968254f;

f0 -=-0.23809524f*m1+ 12.0f*m2;
f1 -=-0.08730159f*m1+- 4.0f*m2+-  4.0f*m4                      + 2.f*m9+-4.0f*m10                                                         ;
f2 -=-0.08730159f*m1+- 4.0f*m2           +  -4.0f*m6           +-    m9+ 2.0f*m10+ m11+-2.f*m12                                           ;
f3 -=-0.08730159f*m1+- 4.0f*m2+   4.0f*m4                      + 2.f*m9+-4.0f*m10                                                         ;
f4 -=-0.08730159f*m1+- 4.0f*m2           +   4.0f*m6           +-    m9+ 2.0f*m10+ m11+-2.f*m12                                           ;
f5 -= 0.06349206f*m1+       m2+        m4+        m6           +     m9+      m10+ m11+     m12+ m13                +  m16+ -m17          ;
f6 -= 0.06349206f*m1+       m2+-       m4+        m6           +     m9+      m10+ m11+     m12+-m13                + -m16+ -m17          ;
f7 -= 0.06349206f*m1+       m2+-       m4+-       m6           +     m9+      m10+ m11+     m12+ m13                + -m16+  m17          ;
f8 -= 0.06349206f*m1+       m2+        m4+-       m6           +     m9+      m10+ m11+     m12+-m13                +  m16+  m17          ;
f9 -=-0.08730159f*m1+- 4.0f*m2                      +-  4.0f*m8+-    m9+ 2.0f*m10+-m11+ 2.f*m12                                           ;
f10-= 0.06349206f*m1+       m2+        m4           +        m8+     m9+      m10+-m11+-    m12               +  m15+ -m16          +  m18;
f11-= 0.06349206f*m1+       m2           +        m6+        m8+-2.f*m9+-2.0f*m10                   +  m14                    +  m17+ -m18;
f12-= 0.06349206f*m1+       m2+-       m4           +        m8+     m9+      m10+-m11+-    m12               + -m15+  m16          +  m18;
f13-= 0.06349206f*m1+       m2           +-       m6+        m8+-2.f*m9+-2.0f*m10                   + -m14                    + -m17+ -m18;
f14-=-0.08730159f*m1+- 4.0f*m2                      +   4.0f*m8+-    m9+ 2.0f*m10+-m11+ 2.f*m12                                           ;          
f15-= 0.06349206f*m1+       m2+        m4           +-       m8+     m9+      m10+-m11+-    m12               + -m15+ -m16          + -m18;
f16-= 0.06349206f*m1+       m2           +        m6+-       m8+-2.f*m9+-2.0f*m10                   + -m14                    +  m17+  m18;
f17-= 0.06349206f*m1+       m2+-       m4           +-       m8+     m9+      m10+-m11+-    m12               +  m15+  m16          + -m18;
f18-= 0.06349206f*m1+       m2           +-       m6+-       m8+-2.f*m9+-2.0f*m10                   +  m14                    + -m17+  m18;

//f0 -=-0.23809524f*m1+ 0.047619048f*m2;
//f1 -=-0.08730159f*m1+-0.015873016f*m2+-  0.1f*m4                      + 0.0555555556f*m9*omega+-0.0555555556f*m10                                                                                     ;
//f2 -=-0.08730159f*m1+-0.015873016f*m2           +  -0.1f*m6           +-0.0277777778f*m9*omega+ 0.0277777778f*m10+ 0.083333333f*m11*omega+-0.083333333f*m12                                                                 ;
//f3 -=-0.08730159f*m1+-0.015873016f*m2+   0.1f*m4                      + 0.0555555556f*m9*omega+-0.0555555556f*m10                                                                                     ;
//f4 -=-0.08730159f*m1+-0.015873016f*m2           +   0.1f*m6           +-0.0277777778f*m9*omega+ 0.0277777778f*m10+ 0.083333333f*m11*omega+-0.083333333f*m12                                                                 ;
//f5 -= 0.06349206f*m1+ 0.003968254f*m2+ 0.025f*m4+ 0.025f*m6           + 0.0277777778f*m9*omega+ 0.0138888889f*m10+ 0.083333333f*m11*omega+ 0.041666667f*m12+ 0.25f*m13                          +  0.125f*m16+ -0.125f*m17          ;
//f6 -= 0.06349206f*m1+ 0.003968254f*m2+-0.025f*m4+ 0.025f*m6           + 0.0277777778f*m9*omega+ 0.0138888889f*m10+ 0.083333333f*m11*omega+ 0.041666667f*m12+-0.25f*m13                          + -0.125f*m16+ -0.125f*m17          ;
//f7 -= 0.06349206f*m1+ 0.003968254f*m2+-0.025f*m4+-0.025f*m6           + 0.0277777778f*m9*omega+ 0.0138888889f*m10+ 0.083333333f*m11*omega+ 0.041666667f*m12+ 0.25f*m13                          + -0.125f*m16+  0.125f*m17          ;
//f8 -= 0.06349206f*m1+ 0.003968254f*m2+ 0.025f*m4+-0.025f*m6           + 0.0277777778f*m9*omega+ 0.0138888889f*m10+ 0.083333333f*m11*omega+ 0.041666667f*m12+-0.25f*m13                          +  0.125f*m16+  0.125f*m17          ;
//f9 -=-0.08730159f*m1+-0.015873016f*m2                      +-  0.1f*m8+-0.0277777778f*m9*omega+ 0.0277777778f*m10+-0.083333333f*m11*omega+ 0.083333333f*m12                                                                 ;
//f10-= 0.06349206f*m1+ 0.003968254f*m2+ 0.025f*m4           + 0.025f*m8+ 0.0277777778f*m9*omega+ 0.0138888889f*m10+-0.083333333f*m11*omega+-0.041666667f*m12                   +  0.25f*m15*omega+ -0.125f*m16          +  0.125f*m18;
//f11-= 0.06349206f*m1+ 0.003968254f*m2           + 0.025f*m6+ 0.025f*m8+-0.0555555556f*m9*omega+-0.0277777778f*m10                                                   +  0.25f*m14                          +  0.125f*m17+ -0.125f*m18;
//f12-= 0.06349206f*m1+ 0.003968254f*m2+-0.025f*m4           + 0.025f*m8+ 0.0277777778f*m9*omega+ 0.0138888889f*m10+-0.083333333f*m11*omega+-0.041666667f*m12                   + -0.25f*m15*omega+  0.125f*m16          +  0.125f*m18;
//f13-= 0.06349206f*m1+ 0.003968254f*m2           +-0.025f*m6+ 0.025f*m8+-0.0555555556f*m9*omega+-0.0277777778f*m10                                                   + -0.25f*m14                          + -0.125f*m17+ -0.125f*m18;
//f14-=-0.08730159f*m1+-0.015873016f*m2                      +   0.1f*m8+-0.0277777778f*m9*omega+ 0.0277777778f*m10+-0.083333333f*m11*omega+ 0.083333333f*m12                                                                 ;
//f15-= 0.06349206f*m1+ 0.003968254f*m2+ 0.025f*m4           +-0.025f*m8+ 0.0277777778f*m9*omega+ 0.0138888889f*m10+-0.083333333f*m11*omega+-0.041666667f*m12                   + -0.25f*m15*omega+ -0.125f*m16          + -0.125f*m18;
//f16-= 0.06349206f*m1+ 0.003968254f*m2           + 0.025f*m6+-0.025f*m8+-0.0555555556f*m9*omega+-0.0277777778f*m10                                                   + -0.25f*m14                          +  0.125f*m17+  0.125f*m18;
//f17-= 0.06349206f*m1+ 0.003968254f*m2+-0.025f*m4           +-0.025f*m8+ 0.0277777778f*m9*omega+ 0.0138888889f*m10+-0.083333333f*m11*omega+-0.041666667f*m12                   +  0.25f*m15*omega+  0.125f*m16          + -0.125f*m18;
//f18-= 0.06349206f*m1+ 0.003968254f*m2           +-0.025f*m6+-0.025f*m8+-0.0555555556f*m9*omega+-0.0277777778f*m10                                                   +  0.25f*m14                          + -0.125f*m17+  0.125f*m18;

//f0 -= -30.f*19.f*m1/2394.f+ 12.f*m2/252.f                                                                                                                                                                               ;
//f1 -= -11.f*19.f*m1/2394.f+ -4.f*m2/252.f+ -4.f*m4/40.f                            +  2.f*m9*omega/36.f+ -4.f*m10/72.f                                                                                                  ;
//f2 -= -11.f*19.f*m1/2394.f+ -4.f*m2/252.f              + -4.f*m6/40.f              + -    m9*omega/36.f+  2.f*m10/72.f+  m11*omega/12.f+ -2.f*m12/24.f                                                                  ;
//f3 -= -11.f*19.f*m1/2394.f+ -4.f*m2/252.f+  4.f*m4/40.f                            +  2.f*m9*omega/36.f+ -4.f*m10/72.f                                                                                                  ;
//f4 -= -11.f*19.f*m1/2394.f+ -4.f*m2/252.f              +  4.f*m6/40.f              + -    m9*omega/36.f+  2.f*m10/72.f+  m11*omega/12.f+ -2.f*m12/24.f                                                                  ;
//f5 -=   8.f*19.f*m1/2394.f+      m2/252.f+      m4/40.f+      m6/40.f              +      m9*omega/36.f+      m10/72.f+  m11*omega/12.f+      m12/24.f+  m13/4.f                          +  m16/8.f+ -m17/8.f          ;
//f6 -=   8.f*19.f*m1/2394.f+      m2/252.f+ -    m4/40.f+      m6/40.f              +      m9*omega/36.f+      m10/72.f+  m11*omega/12.f+      m12/24.f+ -m13/4.f                          + -m16/8.f+ -m17/8.f          ;
//f7 -=   8.f*19.f*m1/2394.f+      m2/252.f+ -    m4/40.f+ -    m6/40.f              +      m9*omega/36.f+      m10/72.f+  m11*omega/12.f+      m12/24.f+  m13/4.f                          + -m16/8.f+  m17/8.f          ;
//f8 -=   8.f*19.f*m1/2394.f+      m2/252.f+      m4/40.f+ -    m6/40.f              +      m9*omega/36.f+      m10/72.f+  m11*omega/12.f+      m12/24.f+ -m13/4.f                          +  m16/8.f+  m17/8.f          ;
//f9 -= -11.f*19.f*m1/2394.f+ -4.f*m2/252.f                            + -4.f*m8/40.f+ -    m9*omega/36.f+  2.f*m10/72.f+ -m11*omega/12.f+  2.f*m12/24.f                                                                  ;
//f10-=   8.f*19.f*m1/2394.f+      m2/252.f+      m4/40.f              +      m8/40.f+      m9*omega/36.f+      m10/72.f+ -m11*omega/12.f+ -    m12/24.f                    +  m15*omega/4.f+ -m16/8.f          +  m18/8.f;
//f11-=   8.f*19.f*m1/2394.f+      m2/252.f              +      m6/40.f+      m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f                                          +  m14/4.f                          +  m17/8.f+ -m18/8.f;
//f12-=   8.f*19.f*m1/2394.f+      m2/252.f+ -    m4/40.f              +      m8/40.f+      m9*omega/36.f+      m10/72.f+ -m11*omega/12.f+ -    m12/24.f                    + -m15*omega/4.f+  m16/8.f          +  m18/8.f;
//f13-=   8.f*19.f*m1/2394.f+      m2/252.f              + -    m6/40.f+      m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f                                          + -m14/4.f                          + -m17/8.f+ -m18/8.f;
//f14-= -11.f*19.f*m1/2394.f+ -4.f*m2/252.f                            +  4.f*m8/40.f+ -    m9*omega/36.f+  2.f*m10/72.f+ -m11*omega/12.f+  2.f*m12/24.f                                                                  ;
//f15-=   8.f*19.f*m1/2394.f+      m2/252.f+      m4/40.f              + -    m8/40.f+      m9*omega/36.f+      m10/72.f+ -m11*omega/12.f+ -    m12/24.f                    + -m15*omega/4.f+ -m16/8.f          + -m18/8.f;
//f16-=   8.f*19.f*m1/2394.f+      m2/252.f              +      m6/40.f+ -    m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f                                          + -m14/4.f                          +  m17/8.f+  m18/8.f;
//f17-=   8.f*19.f*m1/2394.f+      m2/252.f+ -    m4/40.f              + -    m8/40.f+      m9*omega/36.f+      m10/72.f+ -m11*omega/12.f+ -    m12/24.f                    +  m15*omega/4.f+  m16/8.f          + -m18/8.f;
//f18-=   8.f*19.f*m1/2394.f+      m2/252.f              + -    m6/40.f+ -    m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f                                          +  m14/4.f                          + -m17/8.f+  m18/8.f;

//f0 -= -30.f*m1/2394.f+ 12.f*m2/252.f+  0.f*m4/40.f+  0.f*m6/40.f+  0.f*m8/40.f+  0.f*m9*omega/36.f+  0.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f1 -= -11.f*m1/2394.f+ -4.f*m2/252.f+ -4.f*m4/40.f+  0.f*m6/40.f+  0.f*m8/40.f+  2.f*m9*omega/36.f+ -4.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f2 -= -11.f*m1/2394.f+ -4.f*m2/252.f+  0.f*m4/40.f+ -4.f*m6/40.f+  0.f*m8/40.f+ -1.f*m9*omega/36.f+  2.f*m10/72.f+  1.f*m11*omega/12.f+ -2.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f3 -= -11.f*m1/2394.f+ -4.f*m2/252.f+  4.f*m4/40.f+  0.f*m6/40.f+  0.f*m8/40.f+  2.f*m9*omega/36.f+ -4.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f4 -= -11.f*m1/2394.f+ -4.f*m2/252.f+  0.f*m4/40.f+  4.f*m6/40.f+  0.f*m8/40.f+ -1.f*m9*omega/36.f+  2.f*m10/72.f+  1.f*m11*omega/12.f+ -2.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f5 -=   8.f*m1/2394.f+  1.f*m2/252.f+  1.f*m4/40.f+  1.f*m6/40.f+  0.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+  1.f*m11*omega/12.f+  1.f*m12/24.f+  1.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  1.f*m16/8.f+ -1.f*m17/8.f+  0.f*m18/8.f;
//f6 -=   8.f*m1/2394.f+  1.f*m2/252.f+ -1.f*m4/40.f+  1.f*m6/40.f+  0.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+  1.f*m11*omega/12.f+  1.f*m12/24.f+ -1.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+ -1.f*m16/8.f+ -1.f*m17/8.f+  0.f*m18/8.f;
//f7 -=   8.f*m1/2394.f+  1.f*m2/252.f+ -1.f*m4/40.f+ -1.f*m6/40.f+  0.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+  1.f*m11*omega/12.f+  1.f*m12/24.f+  1.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+ -1.f*m16/8.f+  1.f*m17/8.f+  0.f*m18/8.f;
//f8 -=   8.f*m1/2394.f+  1.f*m2/252.f+  1.f*m4/40.f+ -1.f*m6/40.f+  0.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+  1.f*m11*omega/12.f+  1.f*m12/24.f+ -1.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  1.f*m16/8.f+  1.f*m17/8.f+  0.f*m18/8.f;
//f9 -= -11.f*m1/2394.f+ -4.f*m2/252.f+  0.f*m4/40.f+  0.f*m6/40.f+ -4.f*m8/40.f+ -1.f*m9*omega/36.f+  2.f*m10/72.f+ -1.f*m11*omega/12.f+  2.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f10-=   8.f*m1/2394.f+  1.f*m2/252.f+  1.f*m4/40.f+  0.f*m6/40.f+  1.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+ -1.f*m11*omega/12.f+ -1.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  1.f*m15*omega/4.f+ -1.f*m16/8.f+  0.f*m17/8.f+  1.f*m18/8.f;
//f11-=   8.f*m1/2394.f+  1.f*m2/252.f+  0.f*m4/40.f+  1.f*m6/40.f+  1.f*m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+  1.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  1.f*m17/8.f+ -1.f*m18/8.f;
//f12-=   8.f*m1/2394.f+  1.f*m2/252.f+ -1.f*m4/40.f+  0.f*m6/40.f+  1.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+ -1.f*m11*omega/12.f+ -1.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+ -1.f*m15*omega/4.f+  1.f*m16/8.f+  0.f*m17/8.f+  1.f*m18/8.f;
//f13-=   8.f*m1/2394.f+  1.f*m2/252.f+  0.f*m4/40.f+ -1.f*m6/40.f+  1.f*m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+ -1.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+ -1.f*m17/8.f+ -1.f*m18/8.f;
//f14-= -11.f*m1/2394.f+ -4.f*m2/252.f+  0.f*m4/40.f+  0.f*m6/40.f+  4.f*m8/40.f+ -1.f*m9*omega/36.f+  2.f*m10/72.f+ -1.f*m11*omega/12.f+  2.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  0.f*m17/8.f+  0.f*m18/8.f;
//f15-=   8.f*m1/2394.f+  1.f*m2/252.f+  1.f*m4/40.f+  0.f*m6/40.f+ -1.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+ -1.f*m11*omega/12.f+ -1.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+ -1.f*m15*omega/4.f+ -1.f*m16/8.f+  0.f*m17/8.f+ -1.f*m18/8.f;
//f16-=   8.f*m1/2394.f+  1.f*m2/252.f+  0.f*m4/40.f+  1.f*m6/40.f+ -1.f*m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+ -1.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+  1.f*m17/8.f+  1.f*m18/8.f;
//f17-=   8.f*m1/2394.f+  1.f*m2/252.f+ -1.f*m4/40.f+  0.f*m6/40.f+ -1.f*m8/40.f+  1.f*m9*omega/36.f+  1.f*m10/72.f+ -1.f*m11*omega/12.f+ -1.f*m12/24.f+  0.f*m13/4.f+  0.f*m14/4.f+  1.f*m15*omega/4.f+  1.f*m16/8.f+  0.f*m17/8.f+ -1.f*m18/8.f;
//f18-=   8.f*m1/2394.f+  1.f*m2/252.f+  0.f*m4/40.f+ -1.f*m6/40.f+ -1.f*m8/40.f+ -2.f*m9*omega/36.f+ -2.f*m10/72.f+  0.f*m11*omega/12.f+  0.f*m12/24.f+  0.f*m13/4.f+  1.f*m14/4.f+  0.f*m15*omega/4.f+  0.f*m16/8.f+ -1.f*m17/8.f+  1.f*m18/8.f;



















//f0  -= - 0.012531328f*(m1)+  0.047619048f*(m2);
//f1  -= -0.0045948204f*(m1)+ -0.015873016f*(m2)+   -0.1f*(m4)                                                      +  0.055555556f*(m9)*omega + -0.055555556f*(m10);
//f2  -= -0.0045948204f*(m1)+ -0.015873016f*(m2)                           +   -0.1f*(m6)                           + -0.027777778f*(m9)*omega +  0.027777778f*(m10);
//f3  -= -0.0045948204f*(m1)+ -0.015873016f*(m2)+    0.1f*(m4)                                                      +  0.055555556f*(m9)*omega + -0.055555556f*(m10);
//f4  -= -0.0045948204f*(m1)+ -0.015873016f*(m2)                           +    0.1f*(m6)                           + -0.027777778f*(m9)*omega +  0.027777778f*(m10);
//f5  -=  0.0033416876f*(m1)+  0.003968254f*(m2)+  0.025f*(m4)+  0.025f*(m6)                           +  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f6  -=  0.0033416876f*(m1)+  0.003968254f*(m2)+ -0.025f*(m4)+  0.025f*(m6)                           +  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f7  -=  0.0033416876f*(m1)+  0.003968254f*(m2)+ -0.025f*(m4)+ -0.025f*(m6)                           +  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f8  -=  0.0033416876f*(m1)+  0.003968254f*(m2)+  0.025f*(m4)+ -0.025f*(m6)                           +  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f9  -= -0.0045948204f*(m1)+ -0.015873016f*(m2)                                                      +   -0.1f*(m8)+ -0.027777778f*(m9)*omega +  0.027777778f*(m10);
//f10 -=  0.0033416876f*(m1)+  0.003968254f*(m2)+  0.025f*(m4)                           +  0.025f*(m8)+  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f11 -=  0.0033416876f*(m1)+  0.003968254f*(m2)                           +  0.025f*(m6)+  0.025f*(m8)+ -0.055555556f*(m9)*omega + -0.027777778f*(m10);
//f12 -=  0.0033416876f*(m1)+  0.003968254f*(m2)+ -0.025f*(m4)                           +  0.025f*(m8)+  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f13 -=  0.0033416876f*(m1)+  0.003968254f*(m2)                           + -0.025f*(m6)+  0.025f*(m8)+ -0.055555556f*(m9)*omega + -0.027777778f*(m10);
//f14 -= -0.0045948204f*(m1)+ -0.015873016f*(m2)                                                      +    0.1f*(m8)+ -0.027777778f*(m9)*omega +  0.027777778f*(m10);
//f15 -=  0.0033416876f*(m1)+  0.003968254f*(m2)+  0.025f*(m4)                           + -0.025f*(m8)+  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f16 -=  0.0033416876f*(m1)+  0.003968254f*(m2)                           +  0.025f*(m6)+ -0.025f*(m8)+ -0.055555556f*(m9)*omega + -0.027777778f*(m10);
//f17 -=  0.0033416876f*(m1)+  0.003968254f*(m2)+ -0.025f*(m4)                           + -0.025f*(m8)+  0.027777778f*(m9)*omega +  0.013888889f*(m10);
//f18 -=  0.0033416876f*(m1)+  0.003968254f*(m2)                           + -0.025f*(m6)+ -0.025f*(m8)+ -0.055555556f*(m9)*omega + -0.027777778f*(m10);
//
//f2  -=  0.083333333f*(m11)*omega + -0.083333333f*(m12);
//f4  -=  0.083333333f*(m11)*omega + -0.083333333f*(m12);
//f5  -=  0.083333333f*(m11)*omega +  0.041666667f*(m12)+ ( 0.25f*(m13)                                                )*omega; 
//f6  -=  0.083333333f*(m11)*omega +  0.041666667f*(m12)+ (-0.25f*(m13)                                                )*omega; 
//f7  -=  0.083333333f*(m11)*omega +  0.041666667f*(m12)+ ( 0.25f*(m13)                                                )*omega; 
//f8  -=  0.083333333f*(m11)*omega +  0.041666667f*(m12)+ (-0.25f*(m13)                                                )*omega; 
//f9  -= -0.083333333f*(m11)*omega +  0.083333333f*(m12);
//f10 -= -0.083333333f*(m11)*omega + -0.041666667f*(m12) +(                                              +  0.25f*(m15))*omega ;
//f11 -=                                                                         +(                         0.25f*(m14)                        )*omega ;
//f12 -= -0.083333333f*(m11)*omega + -0.041666667f*(m12) +(                                              + -0.25f*(m15))*omega ;
//f13 -=                                                                         +(                        -0.25f*(m14)                        )*omega ;
//f14 -= -0.083333333f*(m11)*omega +  0.083333333f*(m12);
//f15 -= -0.083333333f*(m11)*omega + -0.041666667f*(m12) +(                                              + -0.25f*(m15))*omega ;
//f16 -=                                                                         +(                        -0.25f*(m14)                        )*omega ;
//f17 -= -0.083333333f*(m11)*omega + -0.041666667f*(m12) +(                                              +  0.25f*(m15))*omega ;
//f18 -=                                                                         +(                         0.25f*(m14)                        )*omega ;
//
//f5  -=  0.125f*(m16)+ -0.125f*(m17);                        
//f6  -= -0.125f*(m16)+ -0.125f*(m17);                        
//f7  -= -0.125f*(m16)+  0.125f*(m17);                        
//f8  -=  0.125f*(m16)+  0.125f*(m17);                        
//f10 -= -0.125f*(m16)                              +  0.125f*(m18);
//f11 -=                             +  0.125f*(m17)+ -0.125f*(m18);
//f12 -=  0.125f*(m16)                              +  0.125f*(m18);
//f13 -=                             + -0.125f*(m17)+ -0.125f*(m18);
//f15 -= -0.125f*(m16)                              + -0.125f*(m18);
//f16 -=                             +  0.125f*(m17)+  0.125f*(m18);
//f17 -=  0.125f*(m16)                              + -0.125f*(m18);
//f18 -=                             + -0.125f*(m17)+  0.125f*(m18);
}


void DirichletWest(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
	if(y == 0 && z == 0){
		f2 = f4;
        f13=f18;
        f11=f18;
        f16=f18;
		f6 =f7;
        f9 =f14;
        f12=f17;
	}
	else if(y == 0 && z == ZDIM-1){
		f4 = f2;
        f11=f13;
        f18=f13;
        f16=f13;
		f6 =f7;
        f14=f9;
        f17=f12;
	}
	else if(y == YDIM-1 && z == 0){
		f4 = f2;
        f11=f16;
        f18=f16;
        f13=f16;
		f7 =f6;
        f9 =f14;
        f12=f17;
	}
	else if(y == YDIM-1 && z == ZDIM-1){
		f4 = f2;
        f16=f11;
        f18=f11;
        f13=f11;
		f7 =f6;
        f14=f9;
        f17=f12;
	}
    else{
	if(y == 0){
        f2 = f4;
        f11=f13;
        f16=f18;
        f8 = f5;
    }
	else if(y == YDIM-1){
         f4=f2 ;
        f13=f11;
        f18=f16;
         f5=f8 ;
    }
	if(z == 0){
		f9  = f14;
		f10 = f15;
		f11 = f16;
		f13 = f18;			
	}    
	else if(z == ZDIM-1){
		f14 = f9;
		f15 = f10;
		f16 = f11;
		f18 = f13;
	}
    }
	float u,v,w;//,rho;
    u = UMAX;//*PoisProf(zcoord)*1.5;
    v = 0.0;
	w = 0.0f;
    
	//rho = u+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f3+f6+f7+f12+f17)); //D2Q9i

	f1 = fma(0.0555555556f,6.0f*u,f3);//0.0555555556f*(6.0f*u)+f3;//-0.0555555556f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);;
	f5 = fma(0.0277777778f,6.0f*(u+v),f7 );// -0.0277777778f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
	f8 = fma(0.0277777778f,6.0f*(u-v),f6 );// -0.0277777778f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
	f10= fma(0.0277777778f,6.0f*(u+w),f17);//-0.0277777778f*(rho+3.0f*(-u-w)+4.5f*(-u-w)*(-u-w)-1.5f*usqr);
	f15= fma(0.0277777778f,6.0f*(u-w),f12);//-0.0277777778f*(rho+3.0f*(-u+w)+4.5f*(-u+w)*(-u+w)-1.5f*usqr);
}

void DirichletWest_Reg(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
	if(y == 0){
		f2 = f4;
		f6 = f7;
		f11 = f13;
		f16 = f18;
	}
	else if(y == YDIM-1){
		f4 = f2;
		f7 = f6;
		f13 = f11;
		f18 = f16;
	}
	if(z == 0){
		f9  = f14;
		f10 = f15;
		f11 = f16;
		f12 = f17;
		f13 = f18;			
	}    
	else if(z == ZDIM-1){
		f14 = f9;
		f15 = f10;
		f16 = f11;
		f17 = f12;
		f18 = f13;
	}
	float u,v,w;//,rho;
    u = 0.0f;//*PoisProf(y)*1.5;
    v = UMAX;//0.0;
	w = 0.0f;
//	float rho = u+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f3+f6+f7+f12+f17)); //D2Q9i
//	float u2 = u*u;
//	float v2 = v*v;
//	float w2 = w*w;
//	float usqr = u2+v2+w2;

//	f1 =(0.166666667f*u)+
//		(f3-(-(0.166666667f*u)));
	f1 = f3+0.33333333f*u;
//	f5 =(0.0833333333f*( u+v))+
//		(f7-(0.0833333333f*(-u-v)));
	f5 = f7+0.166666667f*(u+v);
//	f8 =(0.0833333333f*( u-v  ))+
//		(f6-(0.0833333333f*(-u+v  )));
	f8 = f6+0.166666667f*(u-v);
//	f10=(0.0833333333f*( u+w))+
//		(f17-(0.0833333333f*(-u-w)));
	f10= f17+0.166666667f*(u+w);
//	f15=(0.0833333333f*( u-w))+
//		(f12-(0.0833333333f*(-u+w)));
	f15= f12+0.166666667f*(u-w);
		
//	f1 =(0.1031746045f*rho+  -0.0231796391f*usqr+ (0.166666667f*u)   + 0.16666667f*u2)+
//		(f3-(0.1031746045f*rho+  -0.0231796391f*usqr+-(0.166666667f*u)   + 0.16666667f*u2));
//	f5 =(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u+v  +u2+(v2-w2))+  0.25f*u*v)+
//		(f7-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u-v  +u2+(v2-w2))+  0.25f*u*v));
//	f8 =(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u-v  +u2+(v2-w2))+ -0.25f*u*v)+
//		(f6-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u+v  +u2+(v2-w2))+ -0.25f*u*v));
//	f10=(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u+w  +u2+(v2-w2))+  0.25f*u*w)+
//		(f17-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u-w  +u2+(v2-w2))+  0.25f*u*w));
//	f15=(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u-w  +u2+(v2-w2))+ -0.25f*u*w)+
//		(f12-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u+w  +u2+(v2-w2))+ -0.25f*u*w));

//	float PI11 = f1 +f3 +f5 +f6 +f7 +f8 +f10+f12+f15+f17;
//	float PI22 = f2 +f4 +f5 +f6 +f7 +f8 +f11+f13+f16+f18;
//	float PI33 = f9 +f10+f11+f12+f13+f14+f15+f16+f17+f18;

}

void NeumannEast_Reg(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
	if(y == 0 && z == 0){
		f2  = f4;
		f13 = f18;			
		f11 = f18;
		f16 = f18;
		f5  = f8;
		f9  = f14;
		f10 = f15;
	}
	else if(y == 0 && z == ZDIM-1){
		f2  = f4;
		f11 = f13;
		f18 = f13;
		f16 = f13;
		f5  = f8;
		f14 = f9;
		f15 = f10;
	}
	else if(y == YDIM-1 && z == 0){
		f4  = f2;
		f18 = f16;
		f11 = f16;
		f13 = f16;	
		f8  = f5;
		f9  = f14;
		f10 = f15;
	}
	else if(y == YDIM-1 && z == ZDIM-1){
		f4  = f2;
		f13 = f11;
		f16 = f11;
		f18 = f11;
		f8  = f5;
		f14 = f9;
		f15 = f10;
	}

	else{
	if(y == 0){
		f2 = f4;
//		f6 = f7;
		f11 = f13;
		f16 = f18;

		f5 = f8;
	}
	else if(y == YDIM-1){
		f4 = f2;
//		f7 = f6;
		f13 = f11;
		f18 = f16;

		f8 = f5;
	}
	if(z == 0){
		f9  = f14;
		f10 = f15;
		f11 = f16;
//		f12 = f17;
		f13 = f18;			
	}    
	else if(z == ZDIM-1){
		f14 = f9;
		f15 = f10;
		f16 = f11;
//		f17 = f12;
		f18 = f13;
	}
	}

	float u,v,w;//,rho;
	float rho = 1.0f;
    v = 0.0f;
	w = 0.0f;
	u = -rho+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f1+f8+f5+f10+f15)); //D2Q9i
//	float u2 = u*u;
//	float v2 = v*v;
//	float w2 = w*w;
//	float usqr = u2+v2+w2;

	f3 = f1 -0.333333333f*u;
	f7 = f5 -0.166666667f*(u+v);
	f6 = f8 -0.166666667f*(u-v);
	f17= f10-0.166666667f*(u+w);
	f12= f15-0.166666667f*(u-w);


//	f3 =(0.1031746045f*rho+  -0.0231796391f*usqr+-(0.166666667f*u)   + 0.16666667f*u2)+
//		(f1-(0.1031746045f*rho+  -0.0231796391f*usqr+ (0.166666667f*u)   + 0.16666667f*u2));
//	f7 =(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u-v  +u2+(v2-w2))+  0.25f*u*v)+
//		(f5-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u+v  +u2+(v2-w2))+  0.25f*u*v));
//	f6 =(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u+v  +u2+(v2-w2))+ -0.25f*u*v)+
//		(f8-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u-v  +u2+(v2-w2))+ -0.25f*u*v));
//	f17=(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u-w  +u2+(v2-w2))+  0.25f*u*w)+
//		(f10-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u+w  +u2+(v2-w2))+  0.25f*u*w));
//	f12=(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u+w  +u2+(v2-w2))+ -0.25f*u*w)+
//		(f15-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u-w  +u2+(v2-w2))+ -0.25f*u*w));


//	f1 =(0.1031746045f*rho+  -0.0231796391f*usqr+ (0.166666667f*u)   + 0.16666667f*u2)+
//		(f3-(0.1031746045f*rho+  -0.0231796391f*usqr+-(0.166666667f*u)   + 0.16666667f*u2));
//	f5 =(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u+v  +u2+(v2-w2))+  0.25f*u*v)+
//		(f7-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u-v  +u2+(v2-w2))+  0.25f*u*v));
//	f8 =(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u-v  +u2+(v2-w2))+ -0.25f*u*v)+
//		(f6-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u+v  +u2+(v2-w2))+ -0.25f*u*v));
//	f10=(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u+w  +u2+(v2-w2))+  0.25f*u*w)+
//		(f17-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u-w  +u2+(v2-w2))+  0.25f*u*w));
//	f15=(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*( u-w  +u2+(v2-w2))+ -0.25f*u*w)+
//		(f12-(0.0158730149f*rho+  0.00579491071f*usqr+ 0.0833333333f*(-u+w  +u2+(v2-w2))+ -0.25f*u*w));

//	float PI11 = f1 +f3 +f5 +f6 +f7 +f8 +f10+f12+f15+f17;
//	float PI22 = f2 +f4 +f5 +f6 +f7 +f8 +f11+f13+f16+f18;
//	float PI33 = f9 +f10+f11+f12+f13+f14+f15+f16+f17+f18;

}

void DirichletNorth_Reg(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
//	if(x == 0){
//		f2 = f4;
//		f6 = f7;
//		f11 = f13;
//		f16 = f18;
//	}
//	else if(x == XDIM-1){
//		f4 = f2;
//		f7 = f6;
//		f13 = f11;
//		f18 = f16;
//	}
	if(z == 0){
		f9  = f14;
		f10 = f15;
		f11 = f16;
		f12 = f17;
		f13 = f18;			
	}    
	else if(z == ZDIM-1){
		f14 = f9;
		f15 = f10;
		f16 = f11;
		f17 = f12;
		f18 = f13;
	}
	float u,v,w;//,rho;
    u = UMAX;
    v = 0.0f;//0.0;
	w = 0.0f;
//	float rho = u+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f3+f6+f7+f12+f17)); //D2Q9i
//	float u2 = u*u;
//	float v2 = v*v;
//	float w2 = w*w;
//	float usqr = u2+v2+w2;

//	f1 =(0.166666667f*u)+
//		(f3-(-(0.166666667f*u)));
	f4 = f2-0.33333333f*v;
//	f5 =(0.0833333333f*( u+v))+
//		(f7-(0.0833333333f*(-u-v)));
	f7 = f5-0.166666667f*(u+v);
//	f8 =(0.0833333333f*( u-v  ))+
//		(f6-(0.0833333333f*(-u+v  )));
	f8 = f6+0.166666667f*(u-v);
//	f10=(0.0833333333f*( u+w))+
//		(f17-(0.0833333333f*(-u-w)));
	f13= f16-0.166666667f*(v-w);
//	f15=(0.0833333333f*( u-w))+
//		(f12-(0.0833333333f*(-u+w)));
	f18= f11-0.166666667f*(v+w);
	
//
//float feq0 = 0.1904761791f*rho+-0.597127747f*usqr                     
//float feq1 = 0.1031746045f*rho+ 0.032375918f*usqr+  0.1666666667f*u    + 0.055555556f*(2.f*u*u-(v*v+w*w));
//float feq2 = 0.1031746045f*rho+ 0.032375918f*usqr+  0.1666666667f*v    +-0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w);
//float feq3 = 0.1031746045f*rho+ 0.032375918f*usqr+ -0.1666666667f*u    + 0.055555556f*(2.f*u*u-(v*v+w*w));
//float feq4 = 0.1031746045f*rho+ 0.032375918f*usqr+ -0.1666666667f*v    +-0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w);
//float feq5 = 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( u+v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+  0.25f*u*v                              ;
//float feq6 = 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( u-v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+ -0.25f*u*v                              ;
//float feq7 = 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( u+v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+  0.25f*u*v                              ;
//float feq8 = 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( u-v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+ -0.25f*u*v                              ;
//float feq9 = 0.1031746045f*rho+ 0.032375918f*usqr+  0.1666666667f*w;   +-0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                                           
//float feq10= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( u+w)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              +  0.25f*u*w;
//float feq11= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( v+w)+-0.055555556f*(2.f*u*u-(v*v+w*w))                                      +  0.25f*v*w             ;
//float feq12= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( u-w)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              + -0.25f*u*w;
//float feq13= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( v-w)+-0.055555556f*(2.f*u*u-(v*v+w*w))                                        -0.25f*v*w             ;
//float feq14= 0.1031746045f*rho+ 0.032375918f*usqr+ -0.1666666667f*w    +-0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                                           
//float feq15= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*(u-w) + 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              + -0.25f*u*w;
//float feq16= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*(v-w) +-0.055555556f*(2.f*u*u-(v*v+w*w))                                      + -0.25f*v*w             ;
//float feq17= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*(u+w) + 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              +  0.25f*u*w;
//float feq18= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*(v+w) +-0.055555556f*(2.f*u*u-(v*v+w*w))                                      +  0.25f*v*w                 ;
//



//	float PI11 = f1 +f3 +f5 +f6 +f7 +f8 +f10+f12+f15+f17;
//	float PI22 = f2 +f4 +f5 +f6 +f7 +f8 +f11+f13+f16+f18;
//	float PI33 = f9 +f10+f11+f12+f13+f14+f15+f16+f17+f18;

}
void DirichletSouth_Reg(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
//	if(x == 0){
//		f2 = f4;
//		f6 = f7;
//		f11 = f13;
//		f16 = f18;
//	}
//	else if(x == XDIM-1){
//		f4 = f2;
//		f7 = f6;
//		f13 = f11;
//		f18 = f16;
//	}
	if(z == 0){
		f9  = f14;
		f10 = f15;
		f11 = f16;
		f12 = f17;
		f13 = f18;			
	}    
	else if(z == ZDIM-1){
		f14 = f9;
		f15 = f10;
		f16 = f11;
		f17 = f12;
		f18 = f13;
	}
	float u,v,w;//,rho;
    u = UMAX;
    v = 0.0f;//0.0;
	w = 0.0f;
//	float rho = u+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f3+f6+f7+f12+f17)); //D2Q9i
//	float u2 = u*u;
//	float v2 = v*v;
//	float w2 = w*w;
//	float usqr = u2+v2+w2;

	f2 = f4 +0.33333333f*v;
	f5 = f7 +0.166666667f*(u+v);
	f6 = f8 -0.166666667f*(u-v);
	f16= f13+0.166666667f*(v-w);
	f11= f18+0.166666667f*(v+w);
	
//
//float feq0 = 0.1904761791f*rho+-0.597127747f*usqr                     
//float feq1 = 0.1031746045f*rho+ 0.032375918f*usqr+  0.1666666667f*u    + 0.055555556f*(2.f*u*u-(v*v+w*w));
//float feq2 = 0.1031746045f*rho+ 0.032375918f*usqr+  0.1666666667f*v    +-0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w);
//float feq3 = 0.1031746045f*rho+ 0.032375918f*usqr+ -0.1666666667f*u    + 0.055555556f*(2.f*u*u-(v*v+w*w));
//float feq4 = 0.1031746045f*rho+ 0.032375918f*usqr+ -0.1666666667f*v    +-0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w);
//float feq5 = 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( u+v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+  0.25f*u*v                              ;
//float feq6 = 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( u-v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+ -0.25f*u*v                              ;
//float feq7 = 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( u+v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+  0.25f*u*v                              ;
//float feq8 = 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( u-v)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+  0.083333333f*(v*v-w*w)+ -0.25f*u*v                              ;
//float feq9 = 0.1031746045f*rho+ 0.032375918f*usqr+  0.1666666667f*w;   +-0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                                           
//float feq10= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( u+w)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              +  0.25f*u*w;
//float feq11= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*( v+w)+-0.055555556f*(2.f*u*u-(v*v+w*w))                                      +  0.25f*v*w             ;
//float feq12= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( u-w)+ 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              + -0.25f*u*w;
//float feq13= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*( v-w)+-0.055555556f*(2.f*u*u-(v*v+w*w))                                        -0.25f*v*w             ;
//float feq14= 0.1031746045f*rho+ 0.032375918f*usqr+ -0.1666666667f*w    +-0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                                           
//float feq15= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*(u-w) + 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              + -0.25f*u*w;
//float feq16= 0.0158730149f*rho+ 0.033572690f*usqr+  0.083333333f*(v-w) +-0.055555556f*(2.f*u*u-(v*v+w*w))                                      + -0.25f*v*w             ;
//float feq17= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*(u+w) + 0.027777778f*(2.f*u*u-(v*v+w*w))+ -0.083333333f*(v*v-w*w)                              +  0.25f*u*w;
//float feq18= 0.0158730149f*rho+ 0.033572690f*usqr+ -0.083333333f*(v+w) +-0.055555556f*(2.f*u*u-(v*v+w*w))                                      +  0.25f*v*w                 ;
//



//	float PI11 = f1 +f3 +f5 +f6 +f7 +f8 +f10+f12+f15+f17;
//	float PI22 = f2 +f4 +f5 +f6 +f7 +f8 +f11+f13+f16+f18;
//	float PI33 = f9 +f10+f11+f12+f13+f14+f15+f16+f17+f18;

}


void ysymmetry_top(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int z)
{
	if(z == 0){
	f9 = f14;
	f10= f15;
	f11= f16;
	f12= f17;
	f13= f18;
	}
	if(z == ZDIM-1){
	f14= f9 ;
	f15= f10;
	f16= f11;
	f17= f12;
	f18= f13;
	}
	f4 = f2 ;
	f7 = f6 ;
	f8 = f5 ;
	f13= f11;
	f18= f16;
}

void ysymmetry_bot(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int z)
{
	if(z == 0){
	f9 = f14;
	f10= f15;
	f11= f16;
	f12= f17;
	f13= f18;
	}
	if(z == ZDIM-1){
	f14= f9 ;
	f15= f10;
	f16= f11;
	f17= f12;
	f18= f13;
	}
	f2 = f4 ;
	f6 = f7 ;
	f5 = f8 ;
	f11= f13;
	f16= f18;
}

void zsymmetry_top(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y)
{
	if(y == 0){
	f2 = f4 ;
	f6 = f7 ;
	f5 = f8 ;
	f11= f13;
	f16= f18;
	}
	if(y == YDIM-1){
	f4 = f2 ;
	f7 = f6 ;
	f8 = f5 ;
	f13= f11;
	f18= f16;
	}
	f14= f9 ;
	f15= f10;
	f16= f11;
	f17= f12;
	f18= f13;
}

void zsymmetry_bot(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y)
{
	if(y == 0){
	f2 = f4 ;
	f6 = f7 ;
	f5 = f8 ;
	f11= f13;
	f16= f18;
	}
	if(y == YDIM-1){
	f4 = f2 ;
	f7 = f6 ;
	f8 = f5 ;
	f13= f11;
	f18= f16;
	}
	f9 = f14;
	f10= f15;
	f11= f16;
	f12= f17;
	f13= f18;
}


void DirichletWest_Regularized(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
	float PI11 = 0;
	float PI12 = 0;
	float PI22 = 0;
	float PI33 = 0;
	float PI13 = 0;
	float PI23 = 0;
	float Q11 = 0;//this Q is diff from Q used for Smagorinski Model
	float Q12 = 0;
	float Q22 = 0;
	float Q33 = 0;
	float Q23 = 0;
	float Q13 = 0;

	float u,v,w;//,rho;
    u = 0.0f;//*PoisProf(zcoord)*1.5;
    v = UMAX;
	w = 0.0f;
    float usqr = u*u+v*v+w*w;
	float rho = u+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f3+f6+f7+f12+f17)); //D2Q9i
    
    float feq0  = 0.3333333333f*(rho-1.5f*usqr);
    float feq1  = 0.0555555556f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr);
    float feq2  = 0.0555555556f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr);
    float feq3  = 0.0555555556f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);
    float feq4  = 0.0555555556f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr);
    float feq5  = 0.0277777778f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr);
    float feq6  = 0.0277777778f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
    float feq7  = 0.0277777778f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
    float feq8  = 0.0277777778f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr);
    float feq9  = 0.0555555556f*(rho+3.0f*w+4.5f*w*w-1.5f*usqr);
    float feq10 = 0.0277777778f*(rho+3.0f*(u+w)+4.5f*(u+w)*(u+w)-1.5f*usqr);
    float feq11 = 0.0277777778f*(rho+3.0f*(v+w)+4.5f*(v+w)*(u+w)-1.5f*usqr);
    float feq12 = 0.0277777778f*(rho+3.0f*(-u+w)+4.5f*(-u+w)*(-u+w)-1.5f*usqr);
    float feq13 = 0.0277777778f*(rho+3.0f*(-v+w)+4.5f*(-v+w)*(u+w)-1.5f*usqr);
    float feq14 = 0.0555555556f*(rho-3.0f*w+4.5f*w*w-1.5f*usqr);
    float feq15 = 0.0277777778f*(rho+3.0f*(u-w)+4.5f*(u-w)*(u-w)-1.5f*usqr);
    float feq16 = 0.0277777778f*(rho+3.0f*(v-w)+4.5f*(v-w)*(v-w)-1.5f*usqr);
    float feq17 = 0.0277777778f*(rho+3.0f*(-u-w)+4.5f*(-u-w)*(-u-w)-1.5f*usqr);
    float feq18 = 0.0277777778f*(rho+3.0f*(-v-w)+4.5f*(-v-w)*(-v-w)-1.5f*usqr);

	f1 = feq1 +f3 -feq3 ;
	f5 = feq5 +f7 -feq7 ;
	f8 = feq6 +f6 -feq6 ;
	f10= feq10+f17-feq17;
	f15= feq15+f12-feq12;

    PI11 = (f1-feq1)+(f3-feq3)+(f5-feq5)+(f6-feq6)+(f7-feq7)+(f8-feq8)+(f10-feq10)+(f12-feq12)+(f15-feq15)+(f17-feq17);
    PI22 = (f2-feq2)+(f4-feq4)+(f5-feq5)+(f6-feq6)+(f7-feq7)+(f8-feq8)+(f11-feq11)+(f13-feq13)+(f16-feq16)+(f18-feq18);
    PI33 = (f9-feq9)+(f14-feq14)+(f10-feq10)+(f12-feq12)+(f15-feq15)+(f17-feq17)+(f11-feq11)+(f13-feq13)+(f16-feq16)+(f18-feq18);
    PI12 = (f5-feq5)+(f7-feq7)-(f6-feq6)-(f8-feq8);
    PI13 = (f10-feq10)+(f17-feq17)-(f12-feq12)-(f15-feq15);
    PI23 = (f11-feq11)+(f18-feq18)-(f13-feq13)-(f16-feq16);

    f0  = feq0 +1.5f  *((     -0.333333333f)*PI11                         +(     -0.333333333f)*PI22+(     -0.333333333f)*PI33)  ;
    f1  = feq1 +0.25f *((      0.666666667f)*PI11                         +(     -0.333333333f)*PI22+(     -0.333333333f)*PI33)  ;
    f2  = feq2 +0.25f *((     -0.333333333f)*PI11                         +(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f3  = feq3 +0.25f *((      0.666666667f)*PI11                         +(     -0.333333333f)*PI22+(     -0.333333333f)*PI33)  ;
    f4  = feq4 +0.25f *((     -0.333333333f)*PI11                         +(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f5  = feq5 +0.125f*((      0.666666667f)*PI11+2.0f*( PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f6  = feq6 +0.125f*((      0.666666667f)*PI11+2.0f*(-PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f7  = feq7 +0.125f*((      0.666666667f)*PI11+2.0f*( PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f8  = feq8 +0.125f*((      0.666666667f)*PI11+2.0f*(-PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f9  = feq9 +0.25f *((     -0.333333333f)*PI11                         +(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f10 = feq10+0.125f*((      0.666666667f)*PI11+2.0f*(     + PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f11 = feq11+0.125f*((     -0.333333333f)*PI11+2.0f*(           + PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
    f12 = feq12+0.125f*((      0.666666667f)*PI11+2.0f*(     +-PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f13 = feq13+0.125f*((     -0.333333333f)*PI11+2.0f*(           +-PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
    f14 = feq14+0.25f *((     -0.333333333f)*PI11                         +(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f15 = feq15+0.125f*((      0.666666667f)*PI11+2.0f*(     +-PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f16 = feq16+0.125f*((     -0.333333333f)*PI11+2.0f*(           +-PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
    f17 = feq17+0.125f*((      0.666666667f)*PI11+2.0f*(     + PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f18 = feq18+0.125f*((     -0.333333333f)*PI11+2.0f*(           + PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
			
}

void NeumannEast_Regularized(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z)
{
	float PI11 = 0;
	float PI12 = 0;
	float PI22 = 0;
	float PI33 = 0;
	float PI13 = 0;
	float PI23 = 0;
	float Q11 = 0;//this Q is diff from Q used for Smagorinski Model
	float Q12 = 0;
	float Q22 = 0;
	float Q33 = 0;
	float Q23 = 0;
	float Q13 = 0;

	float u,v,w;//,rho;
	float rho = 1.0f;
    v = 0.0f;
	w = 0.0f;
	u = -rho+(f0+f2+f4+f9+f11+f13+f14+f16+f18+2.0f*(f1+f8+f5+f10+f15)); //D2Q9i
    float usqr = u*u+v*v+w*w;
    
    float feq0  = 0.3333333333f*(rho-1.5f*usqr);
    float feq1  = 0.0555555556f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr);
    float feq2  = 0.0555555556f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr);
    float feq3  = 0.0555555556f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);
    float feq4  = 0.0555555556f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr);
    float feq5  = 0.0277777778f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr);
    float feq6  = 0.0277777778f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
    float feq7  = 0.0277777778f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
    float feq8  = 0.0277777778f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr);
    float feq9  = 0.0555555556f*(rho+3.0f*w+4.5f*w*w-1.5f*usqr);
    float feq10 = 0.0277777778f*(rho+3.0f*(u+w)+4.5f*(u+w)*(u+w)-1.5f*usqr);
    float feq11 = 0.0277777778f*(rho+3.0f*(v+w)+4.5f*(v+w)*(v+w)-1.5f*usqr);
    float feq12 = 0.0277777778f*(rho+3.0f*(-u+w)+4.5f*(-u+w)*(-u+w)-1.5f*usqr);
    float feq13 = 0.0277777778f*(rho+3.0f*(-v+w)+4.5f*(-v+w)*(-v+w)-1.5f*usqr);
    float feq14 = 0.0555555556f*(rho-3.0f*w+4.5f*w*w-1.5f*usqr);
    float feq15 = 0.0277777778f*(rho+3.0f*(u-w)+4.5f*(u-w)*(u-w)-1.5f*usqr);
    float feq16 = 0.0277777778f*(rho+3.0f*(v-w)+4.5f*(v-w)*(v-w)-1.5f*usqr);
    float feq17 = 0.0277777778f*(rho+3.0f*(-u-w)+4.5f*(-u-w)*(-u-w)-1.5f*usqr);
    float feq18 = 0.0277777778f*(rho+3.0f*(-v-w)+4.5f*(-v-w)*(-v-w)-1.5f*usqr);

	f3 = feq1 +f1 -feq1 ;
	f7 = feq5 +f5 -feq5 ;
	f6 = feq6 +f8 -feq8 ;
	f17= feq10+f10-feq10;
	f12= feq15+f15-feq15;

    PI11 = (f1-feq1)+(f3-feq3)+(f5-feq5)+(f6-feq6)+(f7-feq7)+(f8-feq8)+(f10-feq10)+(f12-feq12)+(f15-feq15)+(f17-feq17);
    PI22 = (f2-feq2)+(f4-feq4)+(f5-feq5)+(f6-feq6)+(f7-feq7)+(f8-feq8)+(f11-feq11)+(f13-feq13)+(f16-feq16)+(f18-feq18);
    PI33 = (f9-feq9)+(f14-feq14)+(f10-feq10)+(f12-feq12)+(f15-feq15)+(f17-feq17)+(f11-feq11)+(f13-feq13)+(f16-feq16)+(f18-feq18);
    PI12 = (f5-feq5)+(f7-feq7)-(f6-feq6)-(f8-feq8);
    PI13 = (f10-feq10)+(f17-feq17)-(f12-feq12)-(f15-feq15);
    PI23 = (f11-feq11)+(f18-feq18)-(f13-feq13)-(f16-feq16);

    f0  = feq0 +1.5f  *((     -0.333333333f)*PI11                         +(     -0.333333333f)*PI22+(     -0.333333333f)*PI33)  ;
    f1  = feq1 +0.25f *((      0.666666667f)*PI11                         +(     -0.333333333f)*PI22+(     -0.333333333f)*PI33)  ;
    f2  = feq2 +0.25f *((     -0.333333333f)*PI11                         +(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f3  = feq3 +0.25f *((      0.666666667f)*PI11                         +(     -0.333333333f)*PI22+(     -0.333333333f)*PI33)  ;
    f4  = feq4 +0.25f *((     -0.333333333f)*PI11                         +(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f5  = feq5 +0.125f*((      0.666666667f)*PI11+2.0f*( PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f6  = feq6 +0.125f*((      0.666666667f)*PI11+2.0f*(-PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f7  = feq7 +0.125f*((      0.666666667f)*PI11+2.0f*( PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f8  = feq8 +0.125f*((      0.666666667f)*PI11+2.0f*(-PI12            )+(      0.666666667f)*PI22+(     -0.333333333f)*PI33)  ;
    f9  = feq9 +0.25f *((     -0.333333333f)*PI11                         +(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f10 = feq10+0.125f*((      0.666666667f)*PI11+2.0f*(     + PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f11 = feq11+0.125f*((     -0.333333333f)*PI11+2.0f*(           + PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
    f12 = feq12+0.125f*((      0.666666667f)*PI11+2.0f*(     +-PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f13 = feq13+0.125f*((     -0.333333333f)*PI11+2.0f*(           +-PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
    f14 = feq14+0.25f *((     -0.333333333f)*PI11                         +(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f15 = feq15+0.125f*((      0.666666667f)*PI11+2.0f*(     +-PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f16 = feq16+0.125f*((     -0.333333333f)*PI11+2.0f*(           +-PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
    f17 = feq17+0.125f*((      0.666666667f)*PI11+2.0f*(     + PI13      )+(     -0.333333333f)*PI22+(      0.666666667f)*PI33)  ;
    f18 = feq18+0.125f*((     -0.333333333f)*PI11+2.0f*(           + PI23)+(      0.666666667f)*PI22+(      0.666666667f)*PI33)  ;
			
}





inline void boundaries(float& f0, float& f1, float& f2,
					float& f3 , float& f4 , float& f5 ,
					float& f6 , float& f7 , float& f8 , float& f9,
					float& f10, float& f11, float& f12,
					float& f13, float& f14, float& f15,
					float& f16, float& f17, float& f18, int y, int z, int im)
{
	if(im == 3)//DirichletWest
	{
		DirichletWest(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
	}
	if(im == 53)//DirichletWest
	{
		DirichletWest_Regularized(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
	}
	else if(im == 54)//DirichletWest
	{
		NeumannEast_Regularized(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
	}
	if(im == 13)//DirichletWest
	{
		DirichletWest_Reg(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
	}
	else if(im == 14)//DirichletWest
	{
		NeumannEast_Reg(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
	}
//	else if(im == 15)//DirichletNorth
//	{
//		DirichletNorth_Reg(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
//	}
//	if(im == 16)//DirichletSouth
//	{
//		DirichletSouth_Reg(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z);
//	}
	if(im == 21)//ysymm top
	{
		ysymmetry_top(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,z);
	}
	else if(im == 22)//ysymm bot
	{
		ysymmetry_bot(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,z);
	}
	if(im == 23)//zsymm top
	{
		zsymmetry_top(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y);
	}
	else if(im == 24)//zsymm bot
	{
		zsymmetry_bot(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y);
	}
}

















int main()
{
	int i,j,k,l,n,Target;
    float omega,uMax,CharLength,Re,ObstR;
	struct timeval tdr0,tdr1;
	double restime;
//    XDIM = 10;
//    YDIM = 10;
//    ZDIM = 10;
//    ObstR = 4.0f;
//    TMAX = 1;
//    uMax = 0.06f;
//    Re = 10.f;
    CharLength = OBSTR*2.0f;

	float **** fA;
	fA = new float *** [XDIM];
	for(i = 0; i<XDIM; i++){
		fA[i] = new float ** [YDIM];
		for(j = 0; j<YDIM; j++){
			fA[i][j] = new float * [ZDIM];
			for(k = 0; k<ZDIM; k++){
				fA[i][j][k] = new float [19];
			    for(l = 0; l<19; l++){
				    fA[i][j][k][l] = 1.0f;
			    }
	
            	float u,v,w,rho,usqr;
            	rho = 1.f;
            	u = UMAX;//0.0f;
            	v = 0.0f;
            	w = 0.0f;
            	usqr = u*u+v*v+w*w;
            
                fA[i][j][k][0 ] = 1.0f/3.0f*(rho-1.5f*usqr);
                fA[i][j][k][1 ] = 1.0f/18.0f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr);
                fA[i][j][k][2 ] = 1.0f/18.0f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr);
                fA[i][j][k][3 ] = 1.0f/18.0f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);
                fA[i][j][k][4 ] = 1.0f/18.0f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr);
                fA[i][j][k][5 ] = 1.0f/36.0f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr);
                fA[i][j][k][6 ] = 1.0f/36.0f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
                fA[i][j][k][7 ] = 1.0f/36.0f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
                fA[i][j][k][8 ] = 1.0f/36.0f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr);
                fA[i][j][k][9 ] = 1.0f/18.0f*(rho+3.0f*w+4.5f*w*w-1.5f*usqr);
                fA[i][j][k][10] = 1.0f/36.0f*(rho+3.0f*(u+w)+4.5f*(u+w)*(u+w)-1.5f*usqr);
                fA[i][j][k][11] = 1.0f/36.0f*(rho+3.0f*(v+w)+4.5f*(v+w)*(u+w)-1.5f*usqr);
                fA[i][j][k][12] = 1.0f/36.0f*(rho+3.0f*(-u+w)+4.5f*(-u+w)*(-u+w)-1.5f*usqr);
                fA[i][j][k][13] = 1.0f/36.0f*(rho+3.0f*(-v+w)+4.5f*(-v+w)*(u+w)-1.5f*usqr);
                fA[i][j][k][14] = 1.0f/18.0f*(rho-3.0f*w+4.5f*w*w-1.5f*usqr);
                fA[i][j][k][15] = 1.0f/36.0f*(rho+3.0f*(u-w)+4.5f*(u-w)*(u-w)-1.5f*usqr);
                fA[i][j][k][16] = 1.0f/36.0f*(rho+3.0f*(v-w)+4.5f*(v-w)*(v-w)-1.5f*usqr);
                fA[i][j][k][17] = 1.0f/36.0f*(rho+3.0f*(-u-w)+4.5f*(-u-w)*(-u-w)-1.5f*usqr);
                fA[i][j][k][18] = 1.0f/36.0f*(rho+3.0f*(-v-w)+4.5f*(-v-w)*(-v-w)-1.5f*usqr);
			}
		}
	}

	float **** fB;
	fB = new float *** [XDIM];
	for(i = 0; i<XDIM; i++){
		fB[i] = new float ** [YDIM];
		for(j = 0; j<YDIM; j++){
			fB[i][j] = new float * [ZDIM];
			for(k = 0; k<ZDIM; k++){
				fB[i][j][k] = new float [19];
			    for(l = 0; l<19; l++){
				    fB[i][j][k][l] = 1.0f;
			    }
	
            	float u,v,w,rho,usqr;
            	rho = 1.f;
            	u = UMAX;//0.0f;
            	v = 0.0f;
            	w = 0.0f;
            	usqr = u*u+v*v+w*w;
            
                fB[i][j][k][0 ] = 1.0f/3.0f*(rho-1.5f*usqr);
                fB[i][j][k][1 ] = 1.0f/18.0f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr);
                fB[i][j][k][2 ] = 1.0f/18.0f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr);
                fB[i][j][k][3 ] = 1.0f/18.0f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);
                fB[i][j][k][4 ] = 1.0f/18.0f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr);
                fB[i][j][k][5 ] = 1.0f/36.0f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr);
                fB[i][j][k][6 ] = 1.0f/36.0f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
                fB[i][j][k][7 ] = 1.0f/36.0f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
                fB[i][j][k][8 ] = 1.0f/36.0f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr);
                fB[i][j][k][9 ] = 1.0f/18.0f*(rho+3.0f*w+4.5f*w*w-1.5f*usqr);
                fB[i][j][k][10] = 1.0f/36.0f*(rho+3.0f*(u+w)+4.5f*(u+w)*(u+w)-1.5f*usqr);
                fB[i][j][k][11] = 1.0f/36.0f*(rho+3.0f*(v+w)+4.5f*(v+w)*(u+w)-1.5f*usqr);
                fB[i][j][k][12] = 1.0f/36.0f*(rho+3.0f*(-u+w)+4.5f*(-u+w)*(-u+w)-1.5f*usqr);
                fB[i][j][k][13] = 1.0f/36.0f*(rho+3.0f*(-v+w)+4.5f*(-v+w)*(u+w)-1.5f*usqr);
                fB[i][j][k][14] = 1.0f/18.0f*(rho-3.0f*w+4.5f*w*w-1.5f*usqr);
                fB[i][j][k][15] = 1.0f/36.0f*(rho+3.0f*(u-w)+4.5f*(u-w)*(u-w)-1.5f*usqr);
                fB[i][j][k][16] = 1.0f/36.0f*(rho+3.0f*(v-w)+4.5f*(v-w)*(v-w)-1.5f*usqr);
                fB[i][j][k][17] = 1.0f/36.0f*(rho+3.0f*(-u-w)+4.5f*(-u-w)*(-u-w)-1.5f*usqr);
                fB[i][j][k][18] = 1.0f/36.0f*(rho+3.0f*(-v-w)+4.5f*(-v-w)*(-v-w)-1.5f*usqr);

			}
		}
	}

	omega = 1.0f/(3.0f*(UMAX*CharLength/RE)+0.5f);
    int im;
    cout<<"omega = "<<omega<<endl;

	gettimeofday (&tdr0,NULL);

    for(int t = 0; t<TMAX; t+=2){
    
	for(int x = 0; x<XDIM; x++){
		for(int y = 0; y<YDIM; y++){
			for(int z = 0; z<ZDIM; z++){
	            float f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18;
	            im = ImageFcn(x,y,z);
//               f0  = fA[x][y][z][0 ];
//               f1  = fA[x][y][z             ][1 ];
//               f2  = fA[x][y][z             ][2 ];
//               f3  = fA[x][y][z             ][3 ];
//               f4  = fA[x][y][z             ][4 ];
//               f5  = fA[x][y][z             ][5 ];
//               f6  = fA[x][y][z             ][6 ];
//               f7  = fA[x][y][z             ][7 ];
//               f8  = fA[x][y][z             ][8 ];
//               if(z != 0){
//               f9  = fA[x][y][z-1][9 ];
//               f10 = fA[x][y][z-1][10];
//               f11 = fA[x][y][z-1][11];
//               f12 = fA[x][y][z-1][12];
//               f13 = fA[x][y][z-1][13];
//               }
//               else{
//               f9  = 0.f;
//               f10 = 0.f;
//               f11 = 0.f;
//               f12 = 0.f;
//               f13 = 0.f;
//               }
//               if(z != ZDIM-1){
//               f14 = fA[x][y][z+1][14];
//               f15 = fA[x][y][z+1][15];
//               f16 = fA[x][y][z+1][16];
//               f17 = fA[x][y][z+1][17];
//               f18 = fA[x][y][z+1][18];
//               }
//               else{
//               f14 = 0.f;
//               f15 = 0.f;
//               f16 = 0.f;
//               f17 = 0.f;
//               f18 = 0.f;
//               }
//               if(x == 10 && y == 10 && z == 61){
//                   cout<<"f0 = "<<fB[x][y][z][9]<<", f1 = "<<fB[x][y][z][5]<<", f5 = "<<f5<<", f9 = "<<f9<<", f18 = "<<f18<<endl;
//               }
//               if(x == 10 && y == 10 && z == 2){
//                   cout<<"f0 = "<<fB[x][y][z][9]<<", f1 = "<<fB[x][y][z][5]<<", f5 = "<<f5<<", f9 = "<<f9<<", f18 = "<<f18<<endl;
//               }


                f0 = fA[x][y][z][0 ];
                f1 = fA[dmax(x-1)     ][y             ][z             ][1 ];
                f3 = fA[dmin(x+1,XDIM)][y             ][z             ][3 ];
                f2 = fA[x             ][dmax(y-1)     ][z             ][2 ];
                f5 = fA[dmax(x-1)     ][dmax(y-1)     ][z             ][5 ];
                f6 = fA[dmin(x+1,XDIM)][dmax(y-1)     ][z             ][6 ];
                f4 = fA[x             ][dmin(y+1,YDIM)][z             ][4 ];
                f7 = fA[dmin(x+1,XDIM)][dmin(y+1,YDIM)][z             ][7 ];
                f8 = fA[dmax(x-1)     ][dmin(y+1,YDIM)][z             ][8 ];
                f9 = fA[x             ][y             ][dmax(z-1)     ][9 ];
                f10= fA[dmax(x-1)     ][y             ][dmax(z-1)     ][10];
                f11= fA[x             ][dmax(y-1)     ][dmax(z-1)     ][11];
                f12= fA[dmin(x+1,XDIM)][y             ][dmax(z-1)     ][12];
                f13= fA[x             ][dmin(y+1,YDIM)][dmax(z-1)     ][13];
                f14= fA[x             ][y             ][dmin(z+1,ZDIM)][14];
                f15= fA[dmax(x-1)     ][y             ][dmin(z+1,ZDIM)][15];
                f16= fA[x             ][dmax(y-1)     ][dmin(z+1,ZDIM)][16];
                f17= fA[dmin(x+1,XDIM)][y             ][dmin(z+1,ZDIM)][17];
                f18= fA[x             ][dmin(y+1,YDIM)][dmin(z+1,ZDIM)][18];

            	if(im == 1 || im ==10){//BB
            		fB[x][y][z][1 ] = f3 ;
            		fB[x][y][z][2 ] = f4 ;
            		fB[x][y][z][3 ] = f1 ;
            		fB[x][y][z][4 ] = f2 ;
            		fB[x][y][z][5 ] = f7 ;
            		fB[x][y][z][6 ] = f8 ;
            		fB[x][y][z][7 ] = f5 ;
            		fB[x][y][z][8 ] = f6 ;
            		fB[x][y][z][9 ] = f14;
            		fB[x][y][z][10] = f17;
            		fB[x][y][z][11] = f18;
            		fB[x][y][z][12] = f15;
            		fB[x][y][z][13] = f16;
            		fB[x][y][z][14] = f9 ;
            		fB[x][y][z][15] = f12;
            		fB[x][y][z][16] = f13;
            		fB[x][y][z][17] = f10;
            		fB[x][y][z][18] = f11;
            	}
                else{
		        boundaries(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z,im);
		        mrt_collide(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,omega);
		        //bgk_collide(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,omega);

        		fB[x][y][z][0 ] = f0 ;
        		fB[x][y][z][1 ] = f1 ;
        		fB[x][y][z][2 ] = f2 ;
        		fB[x][y][z][3 ] = f3 ;
        		fB[x][y][z][4 ] = f4 ;
        		fB[x][y][z][5 ] = f5 ;
        		fB[x][y][z][6 ] = f6 ;
        		fB[x][y][z][7 ] = f7 ;
        		fB[x][y][z][8 ] = f8 ;
        		fB[x][y][z][9 ] = f9 ;
        		fB[x][y][z][10] = f10;
        		fB[x][y][z][11] = f11;
        		fB[x][y][z][12] = f12;
        		fB[x][y][z][13] = f13;
        		fB[x][y][z][14] = f14;
        		fB[x][y][z][15] = f15;
        		fB[x][y][z][16] = f16;
        		fB[x][y][z][17] = f17;
        		fB[x][y][z][18] = f18;
                }




            }
        }
    }
	for(int x = 0; x<XDIM; x++){
		for(int y = 0; y<YDIM; y++){
			for(int z = 0; z<ZDIM; z++){


	            im = ImageFcn(x,y,z);

                float f0 ;// = fB[x][y][z][0 ];
                float f1 ;// = fB[x][y][z             ][1 ];
                float f2 ;// = fB[x][y][z             ][2 ];
                float f3 ;// = fB[x][y][z             ][3 ];
                float f4 ;// = fB[x][y][z             ][4 ];
                float f5 ;// = fB[x][y][z             ][5 ];
                float f6 ;// = fB[x][y][z             ][6 ];
                float f7 ;// = fB[x][y][z             ][7 ];
                float f8 ;// = fB[x][y][z             ][8 ];
                float f9 ;// = fB[x][y][dmax(z-1)     ][9 ];
                float f10;// = fB[x][y][dmax(z-1)     ][10];
                float f11;// = fB[x][y][dmax(z-1)     ][11];
                float f12;// = fB[x][y][dmax(z-1)     ][12];
                float f13;// = fB[x][y][dmax(z-1)     ][13];
                float f14;// = fB[x][y][dmin(z+1,ZDIM)][14];
                float f15;// = fB[x][y][dmin(z+1,ZDIM)][15];
                float f16;// = fB[x][y][dmin(z+1,ZDIM)][16];
                float f17;// = fB[x][y][dmin(z+1,ZDIM)][17];
                float f18;// = fB[x][y][dmin(z+1,ZDIM)][18];


                f0 = fB[x][y][z][0 ];
                f1 = fB[dmax(x-1)     ][y             ][z             ][1 ];
                f3 = fB[dmin(x+1,XDIM)][y             ][z             ][3 ];
                f2 = fB[x             ][dmax(y-1)     ][z             ][2 ];
                f5 = fB[dmax(x-1)     ][dmax(y-1)     ][z             ][5 ];
                f6 = fB[dmin(x+1,XDIM)][dmax(y-1)     ][z             ][6 ];
                f4 = fB[x             ][dmin(y+1,YDIM)][z             ][4 ];
                f7 = fB[dmin(x+1,XDIM)][dmin(y+1,YDIM)][z             ][7 ];
                f8 = fB[dmax(x-1)     ][dmin(y+1,YDIM)][z             ][8 ];
                f9 = fB[x             ][y             ][dmax(z-1)     ][9 ];
                f10= fB[dmax(x-1)     ][y             ][dmax(z-1)     ][10];
                f11= fB[x             ][dmax(y-1)     ][dmax(z-1)     ][11];
                f12= fB[dmin(x+1,XDIM)][y             ][dmax(z-1)     ][12];
                f13= fB[x             ][dmin(y+1,YDIM)][dmax(z-1)     ][13];
                f14= fB[x             ][y             ][dmin(z+1,ZDIM)][14];
                f15= fB[dmax(x-1)     ][y             ][dmin(z+1,ZDIM)][15];
                f16= fB[x             ][dmax(y-1)     ][dmin(z+1,ZDIM)][16];
                f17= fB[dmin(x+1,XDIM)][y             ][dmin(z+1,ZDIM)][17];
                f18= fB[x             ][dmin(y+1,YDIM)][dmin(z+1,ZDIM)][18];




//                float f0  = fB[x][y][z][0 ];
//                float f1  = fB[dmax(x-1)     ][y             ][z             ][1 ];
//                float f2  = fB[dmin(x+1,XDIM)][y             ][z             ][2 ];
//                float f3  = fB[x             ][dmax(y-1)     ][z             ][3 ];
//                float f4  = fB[dmax(x-1)     ][dmax(y-1)     ][z             ][4 ];
//                float f5  = fB[dmin(x+1,XDIM)][dmax(y-1)     ][z             ][5 ];
//                float f6  = fB[x             ][dmin(y+1,YDIM)][z             ][6 ];
//                float f7  = fB[dmin(x+1,XDIM)][dmin(y+1,YDIM)][z             ][7 ];
//                float f8  = fB[dmax(x-1)     ][dmin(y+1,YDIM)][z             ][8 ];
//                float f9  = fB[x             ][y             ][dmax(z-1)     ][9 ];
//                float f10 = fB[dmax(x-1)     ][y             ][dmax(z-1)     ][10];
//                float f11 = fB[x             ][dmax(y-1)     ][dmax(z-1)     ][11];
//                float f12 = fB[dmin(x+1,XDIM)][y             ][dmax(z-1)     ][12];
//                float f13 = fB[x             ][dmin(y+1,YDIM)][dmax(z-1)     ][13];
//                float f14 = fB[x             ][y             ][dmin(z+1,ZDIM)][14];
//                float f15 = fB[dmax(x-1)     ][y             ][dmin(z+1,ZDIM)][15];
//                float f16 = fB[x             ][dmax(y-1)     ][dmin(z+1,ZDIM)][16];
//                float f17 = fB[dmin(x+1,XDIM)][y             ][dmin(z+1,ZDIM)][17];
//                float f18 = fB[x             ][dmin(y+1,YDIM)][dmin(z+1,ZDIM)][18];

            	if(im == 1 || im ==10){//BB
            		fA[x][y][z][1 ] = f3 ;
            		fA[x][y][z][2 ] = f4 ;
            		fA[x][y][z][3 ] = f1 ;
            		fA[x][y][z][4 ] = f2 ;
            		fA[x][y][z][5 ] = f7 ;
            		fA[x][y][z][6 ] = f8 ;
            		fA[x][y][z][7 ] = f5 ;
            		fA[x][y][z][8 ] = f6 ;
            		fA[x][y][z][9 ] = f14;
            		fA[x][y][z][10] = f17;
            		fA[x][y][z][11] = f18;
            		fA[x][y][z][12] = f15;
            		fA[x][y][z][13] = f16;
            		fA[x][y][z][14] = f9 ;
            		fA[x][y][z][15] = f12;
            		fA[x][y][z][16] = f13;
            		fA[x][y][z][17] = f10;
            		fA[x][y][z][18] = f11;
            	}
                else{
		        boundaries(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,y,z,im);
		        mrt_collide(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,omega);
		        //bgk_collide(f0,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,f11,f12,f13,f14,f15,f16,f17,f18,omega);

        		fA[x][y][z][0 ] = f0 ;
        		fA[x][y][z][1 ] = f1 ;
        		fA[x][y][z][2 ] = f2 ;
        		fA[x][y][z][3 ] = f3 ;
        		fA[x][y][z][4 ] = f4 ;
        		fA[x][y][z][5 ] = f5 ;
        		fA[x][y][z][6 ] = f6 ;
        		fA[x][y][z][7 ] = f7 ;
        		fA[x][y][z][8 ] = f8 ;
        		fA[x][y][z][9 ] = f9 ;
        		fA[x][y][z][10] = f10;
        		fA[x][y][z][11] = f11;
        		fA[x][y][z][12] = f12;
        		fA[x][y][z][13] = f13;
        		fA[x][y][z][14] = f14;
        		fA[x][y][z][15] = f15;
        		fA[x][y][z][16] = f16;
        		fA[x][y][z][17] = f17;
        		fA[x][y][z][18] = f18;
                }






            }
        }
    }

    






    }


	gettimeofday (&tdr1,NULL);
	timeval_subtract (&restime, &tdr1, &tdr0);
    int Nodes = XDIM*YDIM*ZDIM;
	cout<<"Time taken for main kernel: "<<restime<<" ("
			<<double(Nodes*double(TMAX/1000000.f))/restime<<"MLUPS)";

//	for(int x = 0; x<XDIM; x++){
//		for(int y = 0; y<YDIM; y++){
//			for(int z = 0; z<ZDIM; z++){
//			    for(l = 0; l<19; l++){
//                if(fA[x][y][z][l] > 1) cout<<"error"; break;
//                }
//            }
//        }
//    }

    ofstream output;
	output.open ("output.dat");
	
	output<<"VARIABLES = \"X\",\"Y\",\"Z\",\"u\",\"v\",\"w\",\"rho\"\n";
	output<<"ZONE F=POINT, I="<<XDIM<<", J="<<YDIM<<", K="<<ZDIM<<"\n";
	
	int row = 0;
	int col = 0;
	int dep = 0;
	i = 0;
	float rho, u, v, w;
    v = 0;
    w = 0;

	for(dep = 0; dep<ZDIM; dep++){
	for(row = 0; row<YDIM; row++){
		for(col = 0; col<XDIM; col++){
			rho = fA[col][row][dep][0];
			for(j = 1; j<19; j++)
				rho+=fA[col][row][dep][j];
            u = fA[col][row][dep][1]-fA[col][row][dep][3]+fA[col][row][dep][5]-fA[col][row][dep][6]-fA[col][row][dep][7]+fA[col][row][dep][8]+fA[col][row][dep][10]-fA[col][row][dep][12]+fA[col][row][dep][15]-fA[col][row][dep][17];
            v = fA[col][row][dep][2]-fA[col][row][dep][4]+fA[col][row][dep][5]+fA[col][row][dep][6]-fA[col][row][dep][7]-fA[col][row][dep][8]+fA[col][row][dep][11]-fA[col][row][dep][13]+fA[col][row][dep][16]-fA[col][row][dep][18];
			output<<col<<", "<<row<<", "<<dep<<", "<<u<<","<<v<<","<<w<<","<<rho<<endl;
//			output<<col<<", "<<row<<", "<<dep<<", "<<u<<","<<v<<","<<fA_h[i+XDIM*YDIM*ZDIM*1]<<","<<rho<<endl;
		}
	}
	}








}
