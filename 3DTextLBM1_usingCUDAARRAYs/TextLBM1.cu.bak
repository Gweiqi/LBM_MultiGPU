#include <cuda.h>
//#include <cutil.h>
#include <iostream>
#include <ostream>
#include <fstream>
#include "/home/yusuke/NVIDIA_GPU_Computing_SDK/C/common/inc/cutil.h"
using namespace std;

//#define BLOCKSIZE 16;
//int const XDIM = 32;
//int const YDIM = 32;

//int Xcoord(int i, int XDim){
//	int B = BLOCKSIZE*BLOCKSIZE;
//	return (i%B)%BLOCKSIZE+((i/B)%(XDim/BLOCKSIZE))*BLOCKSIZE;
//}
//int Ycoord(int i, int XDim){
//	int B = BLOCKSIZE*BLOCKSIZE;
//	return (i%B)/BLOCKSIZE+((i/B)/(XDim/BLOCKSIZE))*BLOCKSIZE;
//}

//texture
//texture<float,1,cudaReadModeElementType> texRef_f1;
texture<float,2,cudaReadModeElementType> texRef_f1;
texture<float,2,cudaReadModeElementType> texRef_f2;
texture<float,2,cudaReadModeElementType> texRef_f3;
texture<float,2,cudaReadModeElementType> texRef_f4;
texture<float,2,cudaReadModeElementType> texRef_f5;
texture<float,2,cudaReadModeElementType> texRef_f6;
texture<float,2,cudaReadModeElementType> texRef_f7;
texture<float,2,cudaReadModeElementType> texRef_f8;


__global__ void test(float *f0A, float *f1A, float *f2A,
						   float *f3A, float *f4A, float *f5A,
						   float *f6A, float *f7A, float *f8A,
						               float *f1B, float *f2B,
						   float *f3B, float *f4B, float *f5B,
						   float *f6B, float *f7B, float *f8B, //int pitch)
						   int n, int *image, float omega, float uMax, int pitch)
{
	int x = blockIdx.x*blockDim.x+threadIdx.x;
	int y = blockIdx.y*blockDim.y+threadIdx.y;
	int i = x+y*blockDim.x*gridDim.x;
//	j = threadIdx.y*blockDim.x+threadIdx.x;//local block index (for shared mem)
//	i = j+blockDim.x*blockDim.y*gridDim.x*blockIdx.y;
//	i += blockDim.x*blockDim.y*blockIdx.x;//global memory index

		//f0A[i] = f;
		float f1,f2,f3,f4,f5,f6,f7,f8;
		//f1=tex2D(texRef_f3,x+1,y  );
		//f2=tex2D(texRef_f1,x-1,y  );
		//f3=tex2D(texRef_f4,x  ,y+1);
		//f4=tex2D(texRef_f2,x  ,y-1);
		//f5=tex2D(texRef_f7,x+1,y+1);
		//f7=tex2D(texRef_f5,x-1,y-1);
		//f6=tex2D(texRef_f8,x-1,y+1);
		//f8=tex2D(texRef_f6,x+1,y-1);
		//if(image[i] == 0){
		f1=f1A[x+1+(y  )*pitch];
		f2=f2A[x-1+(y  )*pitch];
		f3=f3A[x  +(y+1)*pitch];
		f4=f4A[x  +(y-1)*pitch];
		f5=f5A[x+1+(y+1)*pitch];
		f7=f7A[x-1+(y-1)*pitch];
		f6=f6A[x-1+(y+1)*pitch];
		f8=f8A[x+1+(y-1)*pitch];
		f1B[x+y*pitch]=f1;
		f3B[x+y*pitch]=f3;
		f2B[x+y*pitch]=f2;
		f4B[x+y*pitch]=f4;
		f5B[x+y*pitch]=f5;
		f7B[x+y*pitch]=f7;
		f6B[x+y*pitch]=f6;
		f8B[x+y*pitch]=f8;
		//}
//		f1=f1A[x+y*pitch];
//		f3=f3A[x+y*pitch];
//		f2=f2A[x+y*pitch];
//		f4=f4A[x+y*pitch];
//		f5=f5A[x+y*pitch];
//		f7=f7A[x+y*pitch];
//		f6=f6A[x+y*pitch];
//		f8=f8A[x+y*pitch];
//		f1B[x+y*pitch]=f1;
//		f3B[x+y*pitch]=f3;
//		f2B[x+y*pitch]=f2;
//		f4B[x+y*pitch]=f4;
//		f5B[x+y*pitch]=f5;
//		f7B[x+y*pitch]=f7;
//		f6B[x+y*pitch]=f6;
//		f8B[x+y*pitch]=f8;


}
__global__ void mrt_d_text(float *f0A, float *f1A, float *f2A,
						   float *f3A, float *f4A, float *f5A,
						   float *f6A, float *f7A, float *f8A,
						               float *f1B, float *f2B,
						   float *f3B, float *f4B, float *f5B,
						   float *f6B, float *f7B, float *f8B,
						   int n, int *image, float omega, float uMax, int pitch)
{
	int x = blockIdx.x*blockDim.x+threadIdx.x;
	int y = blockIdx.y*blockDim.y+threadIdx.y;
	int i = x+y*blockDim.x*gridDim.x;
//	j = threadIdx.y*blockDim.x+threadIdx.x;//local block index (for shared mem)
//	i = j+blockDim.x*blockDim.y*gridDim.x*blockIdx.y;
//	i += blockDim.x*blockDim.y*blockIdx.x;//global memory index

//		float f0,f1,f2,f3,f4,f5,f6,f7,f8;
//f0=f0A[i];//+0.01f;
//f1=f1A[x+y*pitch];//+0.01f;
//f3=f3A[x+y*pitch];//+0.01f;
//f2=f2A[x+y*pitch];//+0.01f;
//f4=f4A[x+y*pitch];//+0.01f;
//f5=f5A[x+y*pitch];//+0.01f;
//f7=f7A[x+y*pitch];//+0.01f;
//f6=f6A[x+y*pitch];//+0.01f;
//f8=f8A[x+y*pitch];//+0.01f;
//		f0A[i] = f0A[i];
//		f1B[x+y*pitch]=f1A[x+y*pitch];
//		f3B[x+y*pitch]=f3A[x+y*pitch];
//		f2B[x+y*pitch]=f2A[x+y*pitch];
//		f4B[x+y*pitch]=f4A[x+y*pitch];
//		f5B[x+y*pitch]=f5A[x+y*pitch];
//		f7B[x+y*pitch]=f7A[x+y*pitch];
//		f6B[x+y*pitch]=f6A[x+y*pitch];
//		f8B[x+y*pitch]=f8A[x+y*pitch];

	float u,v,rho;//,usqr;
	int im = image[i];
	if(im == 1){//BB
		f0A[i] = f0A[i];
		f1B[x+y*pitch]=tex2D(texRef_f3,x+1,y  );
		f3B[x+y*pitch]=tex2D(texRef_f1,x-1,y  );
		f2B[x+y*pitch]=tex2D(texRef_f4,x  ,y+1);
		f4B[x+y*pitch]=tex2D(texRef_f2,x  ,y-1);
		f5B[x+y*pitch]=tex2D(texRef_f7,x+1,y+1);
		f7B[x+y*pitch]=tex2D(texRef_f5,x-1,y-1);
		f6B[x+y*pitch]=tex2D(texRef_f8,x-1,y+1);
		f8B[x+y*pitch]=tex2D(texRef_f6,x+1,y-1);
		u = 0;
		v = 0;
		rho = 1.0f;
	}
	else{
		float f0,f1,f2,f3,f4,f5,f6,f7,f8;
		//float u,v,rho,feq,usqr;
		float m1,m2,m4,m6,m7,m8;
//		float meq1,meq2,meq4,meq6,meq7,meq8;
		f0 = f0A[i];
		f1 = tex2D(texRef_f1,x-1,y  );
		f2 = tex2D(texRef_f2,x  ,y-1);
		f3 = tex2D(texRef_f3,x+1,y  );
		f4 = tex2D(texRef_f4,x  ,y+1);
		f5 = tex2D(texRef_f5,x-1,y-1);
		f6 = tex2D(texRef_f6,x+1,y-1);
		f7 = tex2D(texRef_f7,x+1,y+1);
		f8 = tex2D(texRef_f8,x-1,y+1);

//		f1 = f1A[x-1+y*pitch];
//		f2 = f2A[x  +(y-1)*pitch];
//		f3 = f3A[x+1+y*pitch];
//		f4 = f4A[x  +(y+1)*pitch];
//		f5 = f5A[x-1+(y-1)*pitch];
//		f6 = f6A[x+1+(y-1)*pitch];
//		f7 = f7A[x+1+(y+1)*pitch];
//		f8 = f8A[x-1+(y+1)*pitch];
	
		rho = f0+f1+f2+f3+f4+f5+f6+f7+f8;
		u = f1-f3+f5-f6-f7+f8;
		v = f2-f4+f5+f6-f7-f8;
		if(im == 2){
			u = 0.0f;
			v = uMax;
			rho = u+(f0+f2+f4+2.0f*f3+2.0f*f6+2.0f*f7);
			f1 = f3+4.0f*u/6.0f;
	        f5 = f7-0.5f*(f2-f4)+v*0.5f+u/6.0f;
	        f8 = f6+0.5f*(f2-f4)-v*0.5f+u/6.0f;	
		}
		else if(im == 3){//north
			u = uMax;
			v = 0.0f;
			rho = -v+(f0+f1+f3+2.0f*f6+2.0f*f2+2.0f*f5);
			f4 = f2-4.0f*v/6.0f;
	        f7 = f5+0.5f*(f1-f3)-u*0.5f+v/6.0f;
	        f8 = f6-0.5f*(f1-f3)+u*0.5f+v/6.0f;	
		}
//		usqr = u*u+v*v;

//		meq1 = -2.0f*rho+3.0f*usqr;//e_eq (uses rho, Yu)
//		meq2 = rho-3.0f*usqr; //epsilon_eq (uses rho, Yu)
//		meq4 = -u;//qx_eq
//		meq6 = -v;//qy_eq
//		meq7 = u*u-v*v;//pxx_eq
//		meq8 = u*v;//pxy_eq

//		m1 =-4.f*f0+-1.f*f1+-1.f*f2+-1.f*f3+-1.f*f4+ 2.f*f5+ 2.f*f6+ 2.f*f7+ 2.f*f8-(-2.0f*rho+3.0f*usqr);
//		m2 = 4.f*f0+-2.f*f1+-2.f*f2+-2.f*f3+-2.f*f4+ 1.f*f5+ 1.f*f6+ 1.f*f7+ 1.f*f8-(rho-3.0f*usqr); //ep
//		m4 =        -2.f*f1        + 2.f*f3        + 1.f*f5+-1.f*f6+-1.f*f7+ 1.f*f8-(-u);//qx_eq
//		m6 =                -2.f*f2        + 2.f*f4+ 1.f*f5+ 1.f*f6+-1.f*f7+-1.f*f8-(-v);//qy_eq
//		m7 =         1.f*f1+-1.f*f2+ 1.f*f3+-1.f*f4                                -(u*u-v*v);//pxx_eq
//		m8 =                                         1.f*f5+-1.f*f6+ 1.f*f7+-1.f*f8-(u*v);//pxy_eq

		m1 =-4.f*f0 -    f1 -    f2 -    f3 -    f4+ 2.f*f5+ 2.f*f6+ 2.f*f7+ 2.f*f8-(-2.0f*rho+3.0f*(u*u+v*v));
		m2 = 4.f*f0 -2.f*f1 -2.f*f2 -2.f*f3 -2.f*f4+     f5+     f6+     f7+     f8-(rho-3.0f*(u*u+v*v)); //ep
		m4 =        -2.f*f1        + 2.f*f3        +     f5 -    f6 -    f7+     f8-(-u);//qx_eq
		m6 =                -2.f*f2        + 2.f*f4+     f5+     f6 -    f7 -    f8-(-v);//qy_eq
		m7 =             f1 -    f2+     f3 -    f4                                -(u*u-v*v);//pxx_eq
		m8 =                                             f5 -    f6+     f7 -    f8-(u*v);//pxy_eq

//		float Q11 = (m7-meq7)*0.5f;
//		float Q22 = -Q11;
//		float Q12 = m8-meq8;
//		float Q21 = Q12;
//		float Q = Q11*Q11+Q12*Q12+Q21*Q21+Q22*Q22;
//	
//		float Cs = 0.01f;
//		float nu0 = ((1.0f/omega)-0.5f)/3.0f;
//		float Smag = (sqrt((2.0f*rho/(3.0f*omega))*(2.0f*rho/(3.0f*omega))
//				+4.0f*2.0f*rho*Cs*sqrt(Q))-2.0f*rho/(3.0f*omega))/(4.0f*rho*Cs);
//		float OmegaStar = omega;//1.0f/(3.0f*(nu0+Cs*Smag)+0.5f);

//f0A[i]=f0-(-4.f*(m1-meq1)/36.0f+4.f *(m2-meq2)/36.0f);//+0   *(m4-meq4)/12.0f+0   *(m6-meq6)/12.0f;
//f1B[y*pitch+x]=f1-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+-2.f*(m4-meq4)/12.0f                     +   (m7-meq7)*OmegaStar/4.0f);
//f2B[y*pitch+x]=f2-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +-2.f*(m6-meq6)/12.0f+-  (m7-meq7)*OmegaStar/4.0f);
//f3B[y*pitch+x]=f3-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+2.f *(m4-meq4)/12.0f                     +   (m7-meq7)*OmegaStar/4.0f);
//f4B[y*pitch+x]=f4-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +2.f *(m6-meq6)/12.0f+-  (m7-meq7)*OmegaStar/4.0f);
//f5B[y*pitch+x]=f5-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+     (m6-meq6)/12.0f+   (m8-meq8)*OmegaStar/4.0f);
//f6B[y*pitch+x]=f6-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+     (m6-meq6)/12.0f+-  (m8-meq8)*OmegaStar/4.0f);
//f7B[y*pitch+x]=f7-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+   (m8-meq8)*OmegaStar/4.0f);
//f8B[y*pitch+x]=f8-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+-  (m8-meq8)*OmegaStar/4.0f);	

//f0=f0-(-4.f*(m1-meq1)/36.0f+4.f *(m2-meq2)/36.0f);//+0   *(m4-meq4)/12.0f+0   *(m6-meq6)/12.0f;
//f1=f1-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+-2.f*(m4-meq4)/12.0f                     +   (m7-meq7)*OmegaStar/4.0f);
//f2=f2-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +-2.f*(m6-meq6)/12.0f+-  (m7-meq7)*OmegaStar/4.0f);
//f3=f3-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+2.f *(m4-meq4)/12.0f                     +   (m7-meq7)*OmegaStar/4.0f);
//f4=f4-(-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +2.f *(m6-meq6)/12.0f+-  (m7-meq7)*OmegaStar/4.0f);
//f5=f5-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+     (m6-meq6)/12.0f+   (m8-meq8)*OmegaStar/4.0f);
//f6=f6-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+     (m6-meq6)/12.0f+-  (m8-meq8)*OmegaStar/4.0f);
//f7=f7-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+   (m8-meq8)*OmegaStar/4.0f);
//f8=f8-(2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+-  (m8-meq8)*OmegaStar/4.0f);	



//		m1 -= meq1;
//		m2 -= meq2;
//		m4 -= meq4;
//		m6 -= meq6;
//		m7 -= meq7;
//		m8 -= meq8;


//f0=f0-(-4.f*(m1)/36.0f+4.f *(m2)/36.0f);//+0   meq4)/12.0f+0   meq6)/12.0f;
//f1=f1+(m1)+-(m2)+-    (m4)          +   (m7)*omega;
//f2=f2+(m1)+-(m2)          +     (m6)+-  (m7)*omega;
//f3=f3+(m1)+-(m2)+     (m4)          +   (m7)*omega;
//f4=f4+(m1)+-(m2)          +     (m6)+-  (m7)*omega;
//f5=f5-(m1)+ (m2)+     (m4)+     (m6)+   (m8)*omega;
//f6=f6-(m1)+ (m2)+-    (m4)+     (m6)+-  (m8)*omega;
//f7=f7-(m1)+ (m2)+-    (m4)+-    (m6)+   (m8)*omega;
//f8=f8-(m1)+ (m2)+     (m4)+-    (m6)+-  (m8)*omega;	

//f0=f0-(-4.f*(m1)/36.0f+4.f *(m2)/36.0f);//+0   meq4)/12.0f+0   meq6)/12.0f;
//f1=f1-(-    (m1)/36.0f+-2.f*(m2)/36.0f+-2.f*(m4)/12.0f                +   (m7)*omega/4.0f);
//f2=f2-(-    (m1)/36.0f+-2.f*(m2)/36.0f                +-2.f*(m6)/12.0f+-  (m7)*omega/4.0f);
//f3=f3-(-    (m1)/36.0f+-2.f*(m2)/36.0f+2.f *(m4)/12.0f                +   (m7)*omega/4.0f);
//f4=f4-(-    (m1)/36.0f+-2.f*(m2)/36.0f                +2.f *(m6)/12.0f+-  (m7)*omega/4.0f);
//f5=f5-(2.f *(m1)/36.0f+     (m2)/36.0f+     (m4)/12.0f+     (m6)/12.0f+   (m8)*omega/4.0f);
//f6=f6-(2.f *(m1)/36.0f+     (m2)/36.0f+-    (m4)/12.0f+     (m6)/12.0f+-  (m8)*omega/4.0f);
//f7=f7-(2.f *(m1)/36.0f+     (m2)/36.0f+-    (m4)/12.0f+-    (m6)/12.0f+   (m8)*omega/4.0f);
//f8=f8-(2.f *(m1)/36.0f+     (m2)/36.0f+     (m4)/12.0f+-    (m6)/12.0f+-  (m8)*omega/4.0f);	

f0A[i]=f0-(-m1+m2)/9.0f;//(-4.f*(m1)/36.0f+4.f *(m2)/36.0f);
f1B[y*pitch+x]=f1-(-m1-2.0f*(m2+m4)+m7*omega*9.0f)/36.0f;
f2B[y*pitch+x]=f2-(-m1-2.f*m2-6.f*m6-m7*omega*9.0f)/36.0f;
f3B[y*pitch+x]=f3-(-m1-2.f*m2+6.f*m4+m7*omega*9.0f)/36.0f;
f4B[y*pitch+x]=f4-(-m1-2.f*m2+6.f*m6-m7*omega*9.0f)/36.0f;
f5B[y*pitch+x]=f5-(2.f*m1+m2+3.f*m4+3.f*m6+m8*omega*9.0f)/36.0f;
f6B[y*pitch+x]=f6-(2.f*m1+m2-3.f*m4+3.f*m6-m8*omega*9.0f)/36.0f;
f7B[y*pitch+x]=f7-(2.f*m1+m2-3.f*m4-3.f*m6+m8*omega*9.0f)/36.0f;
f8B[y*pitch+x]=f8-(2.f*m1+m2+3.f*m4-3.f*m6-m8*omega*9.0f)/36.0f;
//f1=f1-(-    (m1)/36.0f+-2.f*(m2)/36.0f+-2.f*(m4)/12.0f                +   (m7)*omega/4.0f);
//f2=f2-(-    (m1)/36.0f+-2.f*(m2)/36.0f                +-2.f*(m6)/12.0f+-  (m7)*omega/4.0f);
//f3=f3-(-    (m1)/36.0f+-2.f*(m2)/36.0f+2.f *(m4)/12.0f                +   (m7)*omega/4.0f);
//f4=f4-(-    (m1)/36.0f+-2.f*(m2)/36.0f                +2.f *(m6)/12.0f+-  (m7)*omega/4.0f);
//f5=f5-(2.f *(m1)/36.0f+     (m2)/36.0f+     (m4)/12.0f+     (m6)/12.0f+   (m8)*omega/4.0f);
//f6=f6-(2.f *(m1)/36.0f+     (m2)/36.0f+-    (m4)/12.0f+     (m6)/12.0f+-  (m8)*omega/4.0f);
//f7=f7-(2.f *(m1)/36.0f+     (m2)/36.0f+-    (m4)/12.0f+-    (m6)/12.0f+   (m8)*omega/4.0f);
//f8=f8-(2.f *(m1)/36.0f+     (m2)/36.0f+     (m4)/12.0f+-    (m6)/12.0f+-  (m8)*omega/4.0f);	

//f0A[i]=f0;
//f1B[y*pitch+x]=f1;
//f2B[y*pitch+x]=f2;
//f3B[y*pitch+x]=f3;
//f4B[y*pitch+x]=f4;
//f5B[y*pitch+x]=f5;
//f6B[y*pitch+x]=f6;
//f7B[y*pitch+x]=f7;
//f8B[y*pitch+x]=f8;

	}
}




//__global__ void mrt_d(float *f0, float *f1, float *f2,
//							float *f3, float *f4, float *f5,
//							float *f6, float *f7, float *f8,
//							int n, int *image, float omega, float uMax)
//{
//	int i,m,j,k;
//	j = threadIdx.y*blockDim.x+threadIdx.x;//local block index (for shared mem)
//	i = j+blockDim.x*blockDim.y*gridDim.x*blockIdx.y;
//	i += blockDim.x*blockDim.y*blockIdx.x;//global memory index
//	m = blockDim.x*blockDim.y;
//	//m = BLOCKSIZE*BLOCKSIZE;
//	
//	__shared__ float f0_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f1_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f2_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f3_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f4_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f5_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f6_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f7_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ float f8_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//	__shared__ int image_s[(BLOCKSIZE)*(BLOCKSIZE)+1];
//
//	f0_s[j] = f0[i];
//	f1_s[j] = f1[i];
//	f2_s[j] = f2[i];
//	f3_s[j] = f3[i];
//	f4_s[j] = f4[i];
//	f5_s[j] = f5[i];
//	f6_s[j] = f6[i];
//	f7_s[j] = f7[i];
//	f8_s[j] = f8[i];
//	image_s[j] = image[i];
//	
//	//1
//	if(threadIdx.x == blockDim.x-1 && blockIdx.x != 0){
//		f1_s[j] = f1[i-m];
//		f5_s[j] = f5[i-m];
//		f8_s[j] = f8[i-m];
//	}
//	//3
//	if(threadIdx.x == 0 && blockIdx.x != gridDim.x-1){
//		f3_s[j] = f3[i+m];
//		f7_s[j] = f7[i+m];
//		f6_s[j] = f6[i+m];
//	}
//	//2
//	if(threadIdx.y == blockDim.y-1 && blockIdx.y != 0){
//		f2_s[j] = f2[i-m*gridDim.x];
//		f5_s[j] = f5[i-m*gridDim.x];
//		f6_s[j] = f6[i-m*gridDim.x];
//	}
//	//4
//	if(threadIdx.y == 0 && blockIdx.y != gridDim.y-1){
//		f4_s[j] = f4[i+m*gridDim.x];
//		f7_s[j] = f7[i+m*gridDim.x];
//		f8_s[j] = f8[i+m*gridDim.x];
//	}
//	//5
//	if(threadIdx.y == blockDim.y-1 && threadIdx.x == blockDim.x-1 &&
//		blockIdx.x != 0 && blockIdx.y != 0)//upper corner
//		f5_s[j] = f5[i-m*(1+gridDim.x)];
//	//7
//	if(threadIdx.y == 0 && threadIdx.x == 0 &&
//		blockIdx.x != gridDim.x-1 && blockIdx.y != gridDim.y-1)
//		f7_s[j] = f7[i+m*(1+gridDim.x)];
//	//6
//	if(threadIdx.y == blockDim.y-1 && threadIdx.x == 0 &&
//		blockIdx.x != gridDim.x-1 && blockIdx.y != 0)
//		f6_s[j] = f6[i-m*(gridDim.x-1)];
//	//8
//	if(threadIdx.y == 0 && threadIdx.x == blockDim.x-1 &&
//		blockIdx.x != 0 && blockIdx.y != gridDim.y-1)
//		f8_s[j] = f8[i+m*(gridDim.x-1)];
//
//
//	__syncthreads();
//
//	//STREAM
//	//j = (i+1) & (m-1);//equiv to (i+1)%(m), if m is pow of 2;
//	//j = (i+1)-blockDim.x*(threadIdx.x==blockDim.x-1);//equiv to (i+1)%(m), if m is pow of 2;
//	if((j+1)%(blockDim.x)==0) k=j-blockDim.x+1;
//	else k=j+1;
//	float temp = f3_s[k];
//	f3_s[k]=f1_s[j];
//	f1_s[j]=temp;
//	k = (j+blockDim.x) & (m-1);//equiv to (i+1)%(m), if m is pow of 2;
//	temp = f4_s[k];
//	f4_s[k]=f2_s[j];
//	f2_s[j]=temp;
//	if((j+1)%(blockDim.x)==0) k=(j+1) & (m-1);
//	else k = (j+blockDim.x+1) & (m-1);//equiv to (i+1)%(m), if m is pow of 2;
//	temp = f7_s[k];
//	f7_s[k]=f5_s[j];
//	f5_s[j]=temp;
//	if((j)%(blockDim.x)==0) k=(j+2*blockDim.x-1) & (m-1);
//	else k = (j+blockDim.x-1) & (m-1);//equiv to (i+1)%(m), if m is pow of 2;
//	temp = f8_s[k];
//	f8_s[k]=f6_s[j];
//	f6_s[j]=temp;
//
//	__syncthreads();
//
//	if(image_s[j] != 1){
//	temp = f3_s[j];
//	f3_s[j]=f1_s[j];
//	f1_s[j]=temp;
//	temp = f4_s[j];
//	f4_s[j]=f2_s[j];
//	f2_s[j]=temp;
//	temp = f7_s[j];
//	f7_s[j]=f5_s[j];
//	f5_s[j]=temp;
//	temp = f8_s[j];
//	f8_s[j]=f6_s[j];
//	f6_s[j]=temp;
//
//	
//	//float u,v,rho,feq,usqr;
//	float u,v,rho,usqr;
//	float m1,m2,m4,m6,m7,m8;
//	float meq1,meq2,meq4,meq6,meq7,meq8;
//	rho = f0_s[j]+f1_s[j]+f2_s[j]+f3_s[j]+f4_s[j]+f5_s[j]+f6_s[j]+f7_s[j]+f8_s[j];
//	u = f1_s[j]-f3_s[j]+f5_s[j]-f6_s[j]-f7_s[j]+f8_s[j];
//	v = f2_s[j]-f4_s[j]+f5_s[j]+f6_s[j]-f7_s[j]-f8_s[j];
//	if(image_s[j] == 2){
//		u = 0.0f;
//		v = uMax;
//		rho = u+(f0_s[j]+f2_s[j]+f4_s[j]+2.0f*f3_s[j]+2.0f*f6_s[j]+2.0f*f7_s[j]);
//		f1_s[j] = f3_s[j]+4.0f*u/6.0f;
//        f5_s[j] = f7_s[j]-0.5f*(f2_s[j]-f4_s[j])+v*0.5f+u/6.0f;
//        f8_s[j] = f6_s[j]+0.5f*(f2_s[j]-f4_s[j])-v*0.5f+u/6.0f;	
//	}
//	else if(image_s[j] == 3){//north
//		u = uMax;
//		v = 0.0f;
//		rho = -v+(f0_s[j]+f1_s[j]+f3_s[j]+2.0f*f6_s[j]+2.0f*f2_s[j]+2.0f*f5_s[j]);
//		f4_s[j] = f2_s[j]-4.0f*v/6.0f;
//        f7_s[j] = f5_s[j]+0.5f*(f1_s[j]-f3_s[j])-u*0.5f+v/6.0f;
//        f8_s[j] = f6_s[j]-0.5f*(f1_s[j]-f3_s[j])+u*0.5f+v/6.0f;	
//	}
//	usqr = u*u+v*v;
////	feq = 4.0f/9.0f*(rho-1.5f*usqr);
////	f0_s[j] = f0_s[j]-omega*(f0_s[j]-feq);
////	feq = 1.0f/9.0f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr);
////	f1_s[j] = f1_s[j]-omega*(f1_s[j]-feq);
////	feq = 1.0f/9.0f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr);
////	f2_s[j] = f2_s[j]-omega*(f2_s[j]-feq);
////	feq = 1.0f/9.0f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);
////	f3_s[j] = f3_s[j]-omega*(f3_s[j]-feq);
////	feq = 1.0f/9.0f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr);
////	f4_s[j] = f4_s[j]-omega*(f4_s[j]-feq);
////	feq = 1.0f/36.0f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr);
////	f5_s[j] = f5_s[j]-omega*(f5_s[j]-feq);
////	feq = 1.0f/36.0f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
////	f6_s[j] = f6_s[j]-omega*(f6_s[j]-feq);
////	feq = 1.0f/36.0f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
////	f7_s[j] = f7_s[j]-omega*(f7_s[j]-feq);
////	feq = 1.0f/36.0f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr);
////	f8_s[j] = f8_s[j]-omega*(f8_s[j]-feq);
//
//		meq1 = -2.0f*rho+3.0f*usqr;//e_eq (uses rho, Yu)
//		meq2 = rho-3.0f*usqr; //epsilon_eq (uses rho, Yu)
//		meq4 = -u;//qx_eq
//		meq6 = -v;//qy_eq
//		meq7 = u*u-v*v;//pxx_eq
//		meq8 = u*v;//pxy_eq
//
//		m1 =-4.f*f0_s[j]+-1.f*f1_s[j]+-1.f*f2_s[j]+-1.f*f3_s[j]+-1.f*f4_s[j]+ 2.f*f5_s[j]+ 2.f*f6_s[j]+ 2.f*f7_s[j]+ 2.f*f8_s[j];
//		m2 = 4.f*f0_s[j]+-2.f*f1_s[j]+-2.f*f2_s[j]+-2.f*f3_s[j]+-2.f*f4_s[j]+ 1.f*f5_s[j]+ 1.f*f6_s[j]+ 1.f*f7_s[j]+ 1.f*f8_s[j];
//		m4 =             -2.f*f1_s[j]             + 2.f*f3_s[j]             + 1.f*f5_s[j]+-1.f*f6_s[j]+-1.f*f7_s[j]+ 1.f*f8_s[j];
//		m6 =                          -2.f*f2_s[j]             + 2.f*f4_s[j]+ 1.f*f5_s[j]+ 1.f*f6_s[j]+-1.f*f7_s[j]+-1.f*f8_s[j];
//		m7 =              1.f*f1_s[j]+-1.f*f2_s[j]+ 1.f*f3_s[j]+-1.f*f4_s[j]                                                    ;
//		m8 =                                                                  1.f*f5_s[j]+-1.f*f6_s[j]+ 1.f*f7_s[j]+-1.f*f8_s[j];
//
//		float Q11 = (m7-meq7)*0.5f;
//		float Q22 = -Q11;
//		float Q12 = m8-meq8;
//		float Q21 = Q12;
//		float Q = Q11*Q11+Q12*Q12+Q21*Q21+Q22*Q22;
//	
//		float Cs = 0.01f;
//		float nu0 = ((1.0f/omega)-0.5f)/3.0f;
//		float Smag = (sqrt((2.0f*rho/(3.0f*omega))*(2.0f*rho/(3.0f*omega))
//				+4.0f*2.0f*rho*Cs*sqrt(Q))-2.0f*rho/(3.0f*omega))/(4.0f*rho*Cs);
//		float OmegaStar = 1.0f/(3.0f*(nu0+Cs*Smag)+0.5f);
//
//f0_s[j]-=-4.f*(m1-meq1)/36.0f+4.f *(m2-meq2)/36.0f;//+0   *(m4-meq4)/12.0f+0   *(m6-meq6)/12.0f;
//f1_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+-2.f*(m4-meq4)/12.0f                     +   (m7-meq7)*OmegaStar/4.0f;
//f2_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +-2.f*(m6-meq6)/12.0f+-  (m7-meq7)*OmegaStar/4.0f;
//f3_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+2.f *(m4-meq4)/12.0f                     +   (m7-meq7)*OmegaStar/4.0f;
//f4_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +2.f *(m6-meq6)/12.0f+-  (m7-meq7)*OmegaStar/4.0f;
//f5_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+     (m6-meq6)/12.0f+   (m8-meq8)*OmegaStar/4.0f;
//f6_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+     (m6-meq6)/12.0f+-  (m8-meq8)*OmegaStar/4.0f;
//f7_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+   (m8-meq8)*OmegaStar/4.0f;
//f8_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+-  (m8-meq8)*OmegaStar/4.0f;	
//
////f0_s[j]-=-4.f*(m1-meq1)/36.0f+4.f *(m2-meq2)/36.0f;//+0   *(m4-meq4)/12.0f+0   *(m6-meq6)/12.0f;
////f1_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+-2.f*(m4-meq4)/12.0f                     +   (m7-meq7)*omega/4.0f;
////f2_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +-2.f*(m6-meq6)/12.0f+-  (m7-meq7)*omega/4.0f;
////f3_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f+2.f *(m4-meq4)/12.0f                     +   (m7-meq7)*omega/4.0f;
////f4_s[j]-=-    (m1-meq1)/36.0f+-2.f*(m2-meq2)/36.0f                     +2.f *(m6-meq6)/12.0f+-  (m7-meq7)*omega/4.0f;
////f5_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+     (m6-meq6)/12.0f+   (m8-meq8)*omega/4.0f;
////f6_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+     (m6-meq6)/12.0f+-  (m8-meq8)*omega/4.0f;
////f7_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+-    (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+   (m8-meq8)*omega/4.0f;
////f8_s[j]-=2.f *(m1-meq1)/36.0f+     (m2-meq2)/36.0f+     (m4-meq4)/12.0f+-    (m6-meq6)/12.0f+-  (m8-meq8)*omega/4.0f;	
//
//
//
//
//
//
//	}
//
//	__syncthreads();
//	f0[i] = f0_s[j];
//	f1[i] = f1_s[j];
//	f2[i] = f2_s[j];
//	f3[i] = f3_s[j];
//	f4[i] = f4_s[j];
//	f5[i] = f5_s[j];
//	f6[i] = f6_s[j];
//	f7[i] = f7_s[j];
//	f8[i] = f8_s[j];
//
//
//}
//
__global__ void initialize(float *f0, float *f1, float *f2,
							float *f3, float *f4, float *f5,
							float *f6, float *f7, float *f8,
							int n, int pitch)
{
	int i;
	int x = blockIdx.x*blockDim.x+threadIdx.x;
	int y = blockIdx.y*blockDim.y+threadIdx.y;
	i = threadIdx.y*blockDim.x+threadIdx.x;
	i += blockDim.x*blockDim.y*gridDim.x*blockIdx.y;
	i += blockDim.x*blockDim.y*blockIdx.x;
	//i = y*blockDim.x+x;
	//f1[y*pitch+x] = tex2D(texRef_f1,x,y);
	float u,v,rho,feq,usqr;
	rho = 1.0f;
	u = 0.0f;
	v = 0.0f;
	usqr = u*u+v*v;
	feq = 4.0f/9.0f*(rho-1.5f*usqr);
	f0[i] = feq;
	feq = 1.0f/9.0f*(rho+3.0f*u+4.5f*u*u-1.5f*usqr);
	f1[y*pitch+x] = feq;
	feq = 1.0f/9.0f*(rho+3.0f*v+4.5f*v*v-1.5f*usqr);
	f2[y*pitch+x] = feq;
	feq = 1.0f/9.0f*(rho-3.0f*u+4.5f*u*u-1.5f*usqr);
	f3[y*pitch+x] = feq;
	feq = 1.0f/9.0f*(rho-3.0f*v+4.5f*v*v-1.5f*usqr);
	f4[y*pitch+x] = feq;
	feq = 1.0f/36.0f*(rho+3.0f*(u+v)+4.5f*(u+v)*(u+v)-1.5f*usqr);
	f5[y*pitch+x] = feq;
	feq = 1.0f/36.0f*(rho+3.0f*(-u+v)+4.5f*(-u+v)*(-u+v)-1.5f*usqr);
	f6[y*pitch+x] = feq;
	feq = 1.0f/36.0f*(rho+3.0f*(-u-v)+4.5f*(-u-v)*(-u-v)-1.5f*usqr);
	f7[y*pitch+x] = feq;
	feq = 1.0f/36.0f*(rho+3.0f*(u-v)+4.5f*(u-v)*(u-v)-1.5f*usqr);
	f8[y*pitch+x] = feq;
}




int main(int argc, char *argv[])
{

	float *f0_h, *f1_h, *f2_h, *f3_h, *f4_h, *f5_h, *f6_h, *f7_h, *f8_h;
	float *f0_d, *f1_dA, *f2_dA, *f3_dA, *f4_dA, *f5_dA, *f6_dA, *f7_dA, *f8_dA;
	float        *f1_dB, *f2_dB, *f3_dB, *f4_dB, *f5_dB, *f6_dB, *f7_dB, *f8_dB;
	int *image_d, *image_h;

	ofstream output;
	output.open ("LBM1_out.dat");


	size_t memsize, memsize_int;
	size_t pitch;
	int i, tMax, n, nBlocks, xDim, yDim;
	float Re, omega, uMax, CharLength;
	
	int BLOCKSIZE = 16;
	xDim = 2048;//512;//128;//32;
	yDim = 2048;//512;//128;//32;
	tMax = 1000;
	Re = 1000.f;//100.f;
	uMax = 0.08f;
	CharLength = xDim-2.f;
	omega = 1.0f/(3.0f*(uMax*CharLength/Re)+0.5f);

	cout<<"omega: "<<omega<<endl;

	nBlocks = (xDim/BLOCKSIZE+xDim%BLOCKSIZE)*(yDim/BLOCKSIZE+yDim%BLOCKSIZE);
	int B = BLOCKSIZE*BLOCKSIZE;
	n = nBlocks*B;//block*dimx*dimy

	CUT_DEVICE_INIT(argc,argv);

	memsize = n*sizeof(float);
	memsize_int = n*sizeof(int);

	f0_h = (float *)malloc(memsize);
	f1_h = (float *)malloc(memsize);
	f2_h = (float *)malloc(memsize);
	f3_h = (float *)malloc(memsize);
	f4_h = (float *)malloc(memsize);
	f5_h = (float *)malloc(memsize);
	f6_h = (float *)malloc(memsize);
	f7_h = (float *)malloc(memsize);
	f8_h = (float *)malloc(memsize);
	image_h = (int *)malloc(memsize_int);

	CUDA_SAFE_CALL(cudaMalloc((void **) &f0_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f1_d, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f1_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f2_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f3_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f4_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f5_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f6_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f7_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f8_dA, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f1_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f2_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f3_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f4_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f5_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f6_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f7_dB, memsize));
//	CUDA_SAFE_CALL(cudaMalloc((void **) &f8_dB, memsize));
//	pitch = xDim*sizeof(float);
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f1_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f2_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f3_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f4_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f5_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f6_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f7_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f8_dA, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f1_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f2_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f3_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f4_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f5_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f6_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f7_dB, &pitch, xDim*sizeof(float), yDim));
	CUDA_SAFE_CALL(cudaMallocPitch((void **) &f8_dB, &pitch, xDim*sizeof(float), yDim));
	
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f2_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f3_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f4_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f5_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f6_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f7_d, memsize));
	//CUDA_SAFE_CALL(cudaMalloc((void **) &f8_d, memsize));
	CUDA_SAFE_CALL(cudaMalloc((void **) &image_d, memsize_int));

	for (i = 0; i < n; i++)
	{
		int x = i%xDim;
		int y = i/xDim;
		f0_h[i] = i;
		f1_h[i] = n-i;
		f2_h[i] = i;
		f3_h[i] = i;
		f4_h[i] = i;
		f5_h[i] = i;
		f6_h[i] = i;
		f7_h[i] = i;
		f8_h[i] = i;
		image_h[i] = 0;
		if(x < 1) image_h[i] = 1;//DirichletWest
		if(x > xDim-2) image_h[i] = 1;//BB
		if(y < 1) image_h[i] = 1;//BB
		if(y > yDim-2) image_h[i] = 3;//BB

	}

	
	CUDA_SAFE_CALL(cudaMemcpy(f0_d, f0_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f1_d, f1_h, memsize, cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f1_dA,f1_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f2_dA,f2_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f3_dA,f3_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f4_dA,f4_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f5_dA,f5_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f6_dA,f6_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f7_dA,f7_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f8_dA,f8_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f1_dB,f1_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f2_dB,f2_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f3_dB,f3_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f4_dB,f4_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f5_dB,f5_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f6_dB,f6_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f7_dB,f7_h,memsize,cudaMemcpyHostToDevice));
//	CUDA_SAFE_CALL(cudaMemcpy(f8_dB,f8_h,memsize,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f1_dA,pitch,f1_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f2_dA,pitch,f2_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f3_dA,pitch,f3_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f4_dA,pitch,f4_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f5_dA,pitch,f5_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f6_dA,pitch,f6_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f7_dA,pitch,f7_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f8_dA,pitch,f8_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f1_dB,pitch,f1_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f2_dB,pitch,f2_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f3_dB,pitch,f3_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f4_dB,pitch,f4_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f5_dB,pitch,f5_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f6_dB,pitch,f6_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f7_dB,pitch,f7_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy2D(f8_dB,pitch,f8_h,xDim*sizeof(float),xDim*sizeof(float),yDim,cudaMemcpyHostToDevice));
	
	//CUDA_SAFE_CALL(cudaMemcpy(f2_d, f2_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f3_d, f3_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f4_d, f4_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f5_d, f5_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f6_d, f6_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f7_d, f7_h, memsize, cudaMemcpyHostToDevice));
	//CUDA_SAFE_CALL(cudaMemcpy(f8_d, f8_h, memsize, cudaMemcpyHostToDevice));
	CUDA_SAFE_CALL(cudaMemcpy(image_d, image_h, memsize_int, cudaMemcpyHostToDevice));

	cudaChannelFormatDesc desc = cudaCreateChannelDesc<float>();

	//cout<<(int)(pitch/sizeof(float))<<endl;


    dim3 threads(BLOCKSIZE, BLOCKSIZE);
    dim3 grid(xDim/BLOCKSIZE,yDim/BLOCKSIZE);

	cout<<"nBlocks:"<<nBlocks<<endl;
	//cudaBindTexture(0,texRef_f1, f1_d,memsize);
//	cudaBindTexture2D(0,&texRef_f1, f1_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f2, f2_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f3, f3_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f4, f4_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f5, f5_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f6, f6_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f7, f7_dA,&desc,xDim,yDim,pitch);
//	cudaBindTexture2D(0,&texRef_f8, f8_dA,&desc,xDim,yDim,pitch);
	texRef_f1.normalized = false;
	texRef_f2.normalized = false;
	texRef_f3.normalized = false;
	texRef_f4.normalized = false;
	texRef_f5.normalized = false;
	texRef_f6.normalized = false;
	texRef_f7.normalized = false;
	texRef_f8.normalized = false;
	texRef_f1.filterMode = cudaFilterModePoint;
	texRef_f2.filterMode = cudaFilterModePoint;
	texRef_f3.filterMode = cudaFilterModePoint;
	texRef_f4.filterMode = cudaFilterModePoint;
	texRef_f5.filterMode = cudaFilterModePoint;
	texRef_f6.filterMode = cudaFilterModePoint;
	texRef_f7.filterMode = cudaFilterModePoint;
	texRef_f8.filterMode = cudaFilterModePoint;
	//texRef_f1.addressMode = cudaAddressModeClamp;
	


	initialize<<<grid, threads>>>(f0_d, f1_dA, f2_dA, f3_dA, f4_dA, f5_dA, f6_dA, f7_dA, f8_dA,
									n,(int)(pitch/sizeof(float)));
	for(int t = 0; t<tMax; t=t+2){
	//for(int t = 0; t<tMax; t=t+1){

		//cudaBindTexture(0,texRef_f1, f1_d,memsize);
		cudaBindTexture2D(0,&texRef_f1, f1_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f2, f2_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f3, f3_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f4, f4_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f5, f5_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f6, f6_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f7, f7_dA,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f8, f8_dA,&desc,xDim,yDim,pitch);

		//mrt_d<<<grid, threads>>>(f0_d,f1_d,f2_d,f3_d,f4_d,f5_d,f6_d,f7_d,f8_d,n,image_d,omega,uMax);
		//test<<<grid, threads>>>(f0_d,f1_dA,f2_dA,f3_dA,f4_dA,f5_dA,f6_dA,f7_dA,f8_dA,
		mrt_d_text<<<grid, threads>>>(f0_d,f1_dA,f2_dA,f3_dA,f4_dA,f5_dA,f6_dA,f7_dA,f8_dA,
									        f1_dB,f2_dB,f3_dB,f4_dB,f5_dB,f6_dB,f7_dB,f8_dB,
										    n,image_d,omega,uMax,(int)(pitch/sizeof(float)));
		
		cudaUnbindTexture(texRef_f1);
		cudaUnbindTexture(texRef_f2);
		cudaUnbindTexture(texRef_f3);
		cudaUnbindTexture(texRef_f4);
		cudaUnbindTexture(texRef_f5);
		cudaUnbindTexture(texRef_f6);
		cudaUnbindTexture(texRef_f7);
		cudaUnbindTexture(texRef_f8);

		cudaBindTexture2D(0,&texRef_f1, f1_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f2, f2_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f3, f3_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f4, f4_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f5, f5_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f6, f6_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f7, f7_dB,&desc,xDim,yDim,pitch);
		cudaBindTexture2D(0,&texRef_f8, f8_dB,&desc,xDim,yDim,pitch);

		//test<<<grid, threads>>>(f0_d,f1_dB,f2_dB,f3_dB,f4_dB,f5_dB,f6_dB,f7_dB,f8_dB,
		mrt_d_text<<<grid, threads>>>(f0_d,f1_dB,f2_dB,f3_dB,f4_dB,f5_dB,f6_dB,f7_dB,f8_dB,
										   f1_dA,f2_dA,f3_dA,f4_dA,f5_dA,f6_dA,f7_dA,f8_dA,
										   n,image_d,omega,uMax,(int)(pitch/sizeof(float)));

		cudaUnbindTexture(texRef_f1);
		cudaUnbindTexture(texRef_f2);
		cudaUnbindTexture(texRef_f3);
		cudaUnbindTexture(texRef_f4);
		cudaUnbindTexture(texRef_f5);
		cudaUnbindTexture(texRef_f6);
		cudaUnbindTexture(texRef_f7);
		cudaUnbindTexture(texRef_f8);

		if(t%10000 == 0 && t>0) cout<<"finished "<<t<<" timesteps\n";
	}
	CUT_CHECK_ERROR("Kernel execution failed");

		CUDA_SAFE_CALL(cudaMemcpy(f0_h, f0_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f1_h, f1_d, memsize, cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f1_h,f1_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f2_h,f2_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f3_h,f3_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f4_h,f4_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f5_h,f5_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f6_h,f6_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f7_h,f7_dB,memsize,cudaMemcpyDeviceToHost));
//		CUDA_SAFE_CALL(cudaMemcpy(f8_h,f8_dB,memsize,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f1_h,xDim*sizeof(float),f1_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f2_h,xDim*sizeof(float),f2_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f3_h,xDim*sizeof(float),f3_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f4_h,xDim*sizeof(float),f4_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f5_h,xDim*sizeof(float),f5_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f6_h,xDim*sizeof(float),f6_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f7_h,xDim*sizeof(float),f7_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		CUDA_SAFE_CALL(cudaMemcpy2D(f8_h,xDim*sizeof(float),f8_dB,pitch,xDim*sizeof(float),yDim,cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f2_h, f2_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f3_h, f3_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f4_h, f4_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f5_h, f5_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f6_h, f6_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f7_h, f7_d, memsize, cudaMemcpyDeviceToHost));
		//CUDA_SAFE_CALL(cudaMemcpy(f8_h, f8_d, memsize, cudaMemcpyDeviceToHost));
		output<<"VARIABLES = \"X\",\"Y\",\"u\",\"v\",\"rho\"\n";
		output<<"ZONE F=POINT, I="<<xDim<<", J="<<yDim<<"\n";
		
//		for(i = 0; i<n; i++)
//		{
		int row = 0;
		int col = 0;
		i = 0;
		//int rowB, colB;
		//float xcoord, ycoord;
		float rho, u, v;
		rho = 0;
		u = 0;
		v = 0;

			for(row = 0; row<yDim; row++){
				for(col = 0; col<xDim; col++){
					i = row*xDim+col;
					rho = f0_h[i]+f1_h[i]+f2_h[i]+f3_h[i]+f4_h[i]+f5_h[i]+f6_h[i]+f7_h[i]+f8_h[i];
					u = f1_h[i]-f3_h[i]+f5_h[i]-f6_h[i]-f7_h[i]+f8_h[i];
					v = f2_h[i]-f4_h[i]+f5_h[i]+f6_h[i]-f7_h[i]-f8_h[i];
					output<<col<<", "<<row<<", "<<u<<","<<v<<","<<rho<<endl;
				}
			}
			//i += B*(xDim/BLOCKSIZE-1)+BLOCKSIZE;
//		for(rowB = 0; rowB<(yDim/BLOCKSIZE); rowB++){
//			//i = rowB+B*(xDim/BLOCKSIZE);
//			for(row = 0; row<BLOCKSIZE; row++){
//				i = row*BLOCKSIZE+rowB*B*(xDim/BLOCKSIZE);
//				//ycoord = row+rowB*BLOCKSIZE;//(i%B)/BLOCKSIZE+(i/B)/(xDim/BLOCKSIZE)*BLOCKSIZE;
//				ycoord = Ycoord(i,xDim);
//				for(colB = 0; colB<(xDim/BLOCKSIZE); colB++){
//					for(col = 0; col<BLOCKSIZE; col++){
//						rho = f0_h[i]+f1_h[i]+f2_h[i]+f3_h[i]+f4_h[i]+f5_h[i]+f6_h[i]+f7_h[i]+f8_h[i];
//						u = f1_h[i]-f3_h[i]+f5_h[i]-f6_h[i]-f7_h[i]+f8_h[i];
//						v = f2_h[i]-f4_h[i]+f5_h[i]+f6_h[i]-f7_h[i]-f8_h[i];
//						//xcoord = (i%B)%BLOCKSIZE+((i/B)%(xDim/BLOCKSIZE))*BLOCKSIZE;
//						xcoord = Xcoord(i,xDim);
//						//output<<xcoord<<", "<<ycoord<<", "<<"0"<<","<<"0"<<","<<"0"<<endl;
//						output<<xcoord<<", "<<ycoord<<", "<<u<<","<<v<<","<<rho<<endl;
//						i++;
//					}
//					i += (BLOCKSIZE-1)*BLOCKSIZE;
//				}
//			}
//			//i += B*(xDim/BLOCKSIZE-1)+BLOCKSIZE;
//		}





//		for(row = 0; row<yDim; row++){
//			i = row*xDim;
//			for(col = 0; col<xDim; col++){
//				float rho = f0_h[i]+f1_h[i]+f2_h[i]+f3_h[i]+f4_h[i]+f5_h[i]+f6_h[i]+f7_h[i]+f8_h[i];
//				float u = f1_h[i]-f3_h[i]+f5_h[i]-f6_h[i]-f7_h[i]+f8_h[i];
//				float v = f2_h[i]-f4_h[i]+f5_h[i]+f6_h[i]-f7_h[i]-f8_h[i];
////				output<<i%16<<", "<<i/16<<", "<<f5_h[i]<<","<<f6_h[i]<<","<<f7_h[i]<<endl;
////				output<<i%xDim<<", "<<i/xDim<<", "<<u<<","<<v<<","<<rho<<endl;
//				float xcoord = (i%B)%BLOCKSIZE+(i/B)%(xDim/BLOCKSIZE);
//				float ycoord = (i%B)/BLOCKSIZE+(i/B)/(xDim/BLOCKSIZE);
//				output<<xcoord<<", "<<ycoord<<", "<<u<<","<<v<<","<<rho<<endl;
//				i += 2*BLOCKSIZE+1;
//			}
//		}

	free(f0_h);
	free(f1_h);
	free(f2_h);
	free(f3_h);
	free(f4_h);
	free(f5_h);
	free(f6_h);
	free(f7_h);
	free(f8_h);

	output.close();

	CUDA_SAFE_CALL(cudaFree(f0_d));
	CUDA_SAFE_CALL(cudaFree(f1_dA));
	CUDA_SAFE_CALL(cudaFree(f2_dA));
	CUDA_SAFE_CALL(cudaFree(f3_dA));
	CUDA_SAFE_CALL(cudaFree(f4_dA));
	CUDA_SAFE_CALL(cudaFree(f5_dA));
	CUDA_SAFE_CALL(cudaFree(f6_dA));
	CUDA_SAFE_CALL(cudaFree(f7_dA));
	CUDA_SAFE_CALL(cudaFree(f8_dA));
	CUDA_SAFE_CALL(cudaFree(f1_dB));
	CUDA_SAFE_CALL(cudaFree(f2_dB));
	CUDA_SAFE_CALL(cudaFree(f3_dB));
	CUDA_SAFE_CALL(cudaFree(f4_dB));
	CUDA_SAFE_CALL(cudaFree(f5_dB));
	CUDA_SAFE_CALL(cudaFree(f6_dB));
	CUDA_SAFE_CALL(cudaFree(f7_dB));
	CUDA_SAFE_CALL(cudaFree(f8_dB));
	CUDA_SAFE_CALL(cudaFree(image_d));

	return(0);

}
